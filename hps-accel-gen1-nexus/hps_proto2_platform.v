//--------------------------------------------------------------------------------
// Auto-generated by Migen (a5bc262) & LiteX (7bf6db5f) on 2021-11-09 21:49:46
//--------------------------------------------------------------------------------
module top (
	output wire spiflash4x_cs_n,
	output wire spiflash4x_clk,
	inout wire [3:0] spiflash4x_dq,
	output reg user_led0
);

(* keep = "true" *) wire sys_clk;
wire sys_rst;
wire por_clk;
reg por_rst = 1'd0;
wire soc_clkout;
reg [11:0] soc_por_counter = 12'd4095;
reg soc_soc_rst = 1'd0;
wire soc_cpu_rst;
reg [1:0] soc_reset_storage = 2'd0;
reg soc_reset_re = 1'd0;
reg [31:0] soc_scratch_storage = 32'd305419896;
reg soc_scratch_re = 1'd0;
wire [31:0] soc_bus_errors_status;
wire soc_bus_errors_we;
reg soc_bus_errors_re = 1'd0;
wire soc_bus_error;
reg [31:0] soc_bus_errors = 32'd0;
wire soc_reset;
wire [31:0] soc_interrupt;
wire [29:0] soc_ibus_adr;
wire [31:0] soc_ibus_dat_w;
wire [31:0] soc_ibus_dat_r;
wire [3:0] soc_ibus_sel;
wire soc_ibus_cyc;
wire soc_ibus_stb;
wire soc_ibus_ack;
wire soc_ibus_we;
wire [2:0] soc_ibus_cti;
wire [1:0] soc_ibus_bte;
wire soc_ibus_err;
wire [29:0] soc_dbus_adr;
wire [31:0] soc_dbus_dat_w;
wire [31:0] soc_dbus_dat_r;
wire [3:0] soc_dbus_sel;
wire soc_dbus_cyc;
wire soc_dbus_stb;
wire soc_dbus_ack;
wire soc_dbus_we;
wire [2:0] soc_dbus_cti;
wire [1:0] soc_dbus_bte;
wire soc_dbus_err;
wire soc_vexriscv_cfu_bus_cmd_valid;
wire soc_vexriscv_cfu_bus_cmd_ready;
wire [9:0] soc_vexriscv_cfu_bus_cmd_payload_function_id;
wire [31:0] soc_vexriscv_cfu_bus_cmd_payload_inputs_0;
wire [31:0] soc_vexriscv_cfu_bus_cmd_payload_inputs_1;
wire soc_vexriscv_cfu_bus_rsp_valid;
wire soc_vexriscv_cfu_bus_rsp_ready;
wire [31:0] soc_vexriscv_cfu_bus_rsp_payload_outputs_0;
reg [31:0] soc_vexriscv = 32'd538968064;
wire [29:0] soc_bus_adr;
wire [31:0] soc_bus_dat_w;
reg [31:0] soc_bus_dat_r = 32'd0;
wire [3:0] soc_bus_sel;
wire soc_bus_cyc;
wire soc_bus_stb;
reg soc_bus_ack = 1'd0;
wire soc_bus_we;
wire [2:0] soc_bus_cti;
wire [1:0] soc_bus_bte;
reg soc_bus_err = 1'd0;
wire [31:0] soc_datain0;
wire [31:0] soc_dataout0;
reg soc_cs0 = 1'd0;
reg soc_wren0 = 1'd0;
wire [31:0] soc_datain1;
wire [31:0] soc_dataout1;
reg soc_cs1 = 1'd0;
reg soc_wren1 = 1'd0;
wire [31:0] soc_datain2;
wire [31:0] soc_dataout2;
reg soc_cs2 = 1'd0;
reg soc_wren2 = 1'd0;
wire [31:0] soc_datain3;
wire [31:0] soc_dataout3;
reg soc_cs3 = 1'd0;
reg soc_wren3 = 1'd0;
wire [31:0] soc_datain4;
wire [31:0] soc_dataout4;
reg soc_cs4 = 1'd0;
reg soc_wren4 = 1'd0;
reg soc_litespiddrphycore_source_valid = 1'd0;
wire soc_litespiddrphycore_source_ready;
reg soc_litespiddrphycore_source_first = 1'd0;
reg soc_litespiddrphycore_source_last = 1'd0;
wire [31:0] soc_litespiddrphycore_source_payload_data;
wire soc_litespiddrphycore_sink_valid;
reg soc_litespiddrphycore_sink_ready = 1'd0;
wire soc_litespiddrphycore_sink_first;
wire soc_litespiddrphycore_sink_last;
wire [31:0] soc_litespiddrphycore_sink_payload_data;
wire [5:0] soc_litespiddrphycore_sink_payload_len;
wire [3:0] soc_litespiddrphycore_sink_payload_width;
wire [7:0] soc_litespiddrphycore_sink_payload_mask;
wire soc_litespiddrphycore_cs;
reg soc_litespiddrphycore_en = 1'd0;
wire soc_litespiddrphycore_wait;
wire soc_litespiddrphycore_done;
reg [3:0] soc_litespiddrphycore_count = 4'd11;
wire soc_litespiddrphycore_cs_enable;
reg [3:0] soc_litespiddrphycore0 = 4'd0;
reg [3:0] soc_litespiddrphycore1 = 4'd0;
wire [3:0] soc_litespiddrphycore2;
wire [3:0] soc_litespiddrphycore3;
reg [3:0] soc_litespiddrphycore4 = 4'd0;
wire [3:0] soc_litespiddrphycore5;
reg [7:0] soc_litespiddrphycore_sr_cnt = 8'd0;
reg soc_litespiddrphycore_sr_out_load = 1'd0;
reg soc_litespiddrphycore_sr_out_shift = 1'd0;
reg [31:0] soc_litespiddrphycore_sr_out = 32'd0;
reg soc_litespiddrphycore_sr_in_shift = 1'd0;
reg [31:0] soc_litespiddrphycore_sr_in = 32'd0;
reg soc_litespiddrphycore6 = 1'd0;
reg [1:0] soc_litespiddrphycore7 = 2'd0;
reg [3:0] soc_litespiddrphycore8 = 4'd0;
reg [7:0] soc_litespiddrphycore9 = 8'd0;
wire soc_crossbar_source_valid;
wire soc_crossbar_source_ready;
wire soc_crossbar_source_first;
wire soc_crossbar_source_last;
wire [31:0] soc_crossbar_source_payload_data;
wire [5:0] soc_crossbar_source_payload_len;
wire [3:0] soc_crossbar_source_payload_width;
wire [7:0] soc_crossbar_source_payload_mask;
wire soc_crossbar_sink_valid;
wire soc_crossbar_sink_ready;
wire soc_crossbar_sink_first;
wire soc_crossbar_sink_last;
wire [31:0] soc_crossbar_sink_payload_data;
reg soc_crossbar_cs = 1'd0;
reg soc_litespimmap_source_valid = 1'd0;
wire soc_litespimmap_source_ready;
reg soc_litespimmap_source_first = 1'd0;
reg soc_litespimmap_source_last = 1'd0;
reg [31:0] soc_litespimmap_source_payload_data = 32'd0;
reg [5:0] soc_litespimmap_source_payload_len = 6'd0;
reg [3:0] soc_litespimmap_source_payload_width = 4'd0;
reg [7:0] soc_litespimmap_source_payload_mask = 8'd0;
wire soc_litespimmap_sink_valid;
reg soc_litespimmap_sink_ready = 1'd0;
wire soc_litespimmap_sink_first;
wire soc_litespimmap_sink_last;
wire [31:0] soc_litespimmap_sink_payload_data;
wire [29:0] soc_litespimmap_bus_adr;
wire [31:0] soc_litespimmap_bus_dat_w;
reg [31:0] soc_litespimmap_bus_dat_r = 32'd0;
wire [3:0] soc_litespimmap_bus_sel;
wire soc_litespimmap_bus_cyc;
wire soc_litespimmap_bus_stb;
reg soc_litespimmap_bus_ack = 1'd0;
wire soc_litespimmap_bus_we;
wire [2:0] soc_litespimmap_bus_cti;
wire [1:0] soc_litespimmap_bus_bte;
reg soc_litespimmap_bus_err = 1'd0;
reg soc_litespimmap_cs = 1'd0;
reg soc_litespimmap_burst_cs = 1'd0;
reg [29:0] soc_litespimmap_burst_adr = 30'd0;
reg soc_litespimmap_wait = 1'd0;
wire soc_litespimmap_done;
reg [8:0] soc_litespimmap_count = 9'd256;
reg [7:0] soc_litespimmap_storage = 8'd8;
reg soc_litespimmap_re = 1'd0;
wire [7:0] soc_litespimmap_spi_dummy_bits;
reg [31:0] soc_litespimmap_dummy = 32'd57005;
reg [1:0] soc_litespimmap = 2'd0;
wire soc_port_mmap_user_port_source_valid;
wire soc_port_mmap_user_port_source_ready;
wire soc_port_mmap_user_port_source_first;
wire soc_port_mmap_user_port_source_last;
wire [31:0] soc_port_mmap_user_port_source_payload_data;
wire soc_port_mmap_user_port_sink_valid;
wire soc_port_mmap_user_port_sink_ready;
wire soc_port_mmap_user_port_sink_first;
wire soc_port_mmap_user_port_sink_last;
wire [31:0] soc_port_mmap_user_port_sink_payload_data;
wire [5:0] soc_port_mmap_user_port_sink_payload_len;
wire [3:0] soc_port_mmap_user_port_sink_payload_width;
wire [7:0] soc_port_mmap_user_port_sink_payload_mask;
wire soc_port_mmap_internal_port_source_valid;
wire soc_port_mmap_internal_port_source_ready;
wire soc_port_mmap_internal_port_source_first;
wire soc_port_mmap_internal_port_source_last;
wire [31:0] soc_port_mmap_internal_port_source_payload_data;
wire soc_port_mmap_internal_port_sink_valid;
wire soc_port_mmap_internal_port_sink_ready;
wire soc_port_mmap_internal_port_sink_first;
wire soc_port_mmap_internal_port_sink_last;
wire [31:0] soc_port_mmap_internal_port_sink_payload_data;
wire [5:0] soc_port_mmap_internal_port_sink_payload_len;
wire [3:0] soc_port_mmap_internal_port_sink_payload_width;
wire [7:0] soc_port_mmap_internal_port_sink_payload_mask;
wire soc_port_mmap_request;
wire soc_master_sink_sink_valid;
wire soc_master_sink_sink_ready;
wire soc_master_sink_sink_first;
wire soc_master_sink_sink_last;
wire [31:0] soc_master_sink_sink_payload_data;
wire soc_master_source_source_valid;
wire soc_master_source_source_ready;
wire soc_master_source_source_first;
wire soc_master_source_source_last;
wire [31:0] soc_master_source_source_payload_data;
wire [5:0] soc_master_source_source_payload_len;
wire [3:0] soc_master_source_source_payload_width;
wire [7:0] soc_master_source_source_payload_mask;
wire soc_master_cs;
reg soc_master_cs_storage = 1'd0;
reg soc_master_cs_re = 1'd0;
wire [7:0] soc_master_len;
wire [3:0] soc_master_width;
wire [7:0] soc_master_mask;
reg [23:0] soc_master_phyconfig_storage = 24'd0;
reg soc_master_phyconfig_re = 1'd0;
reg soc_master_rxtx_re = 1'd0;
wire [31:0] soc_master_rxtx_r;
reg soc_master_rxtx_we = 1'd0;
wire [31:0] soc_master_rxtx_w;
wire soc_master_tx_ready;
wire soc_master_rx_ready;
reg [1:0] soc_master_status_status = 2'd0;
wire soc_master_status_we;
reg soc_master_status_re = 1'd0;
wire soc_master_tx_fifo_sink_valid;
wire soc_master_tx_fifo_sink_ready;
reg soc_master_tx_fifo_sink_first = 1'd0;
wire soc_master_tx_fifo_sink_last;
wire [31:0] soc_master_tx_fifo_sink_payload_data;
wire [5:0] soc_master_tx_fifo_sink_payload_len;
wire [3:0] soc_master_tx_fifo_sink_payload_width;
wire [7:0] soc_master_tx_fifo_sink_payload_mask;
reg soc_master_tx_fifo_source_valid = 1'd0;
wire soc_master_tx_fifo_source_ready;
reg soc_master_tx_fifo_source_first = 1'd0;
reg soc_master_tx_fifo_source_last = 1'd0;
reg [31:0] soc_master_tx_fifo_source_payload_data = 32'd0;
reg [5:0] soc_master_tx_fifo_source_payload_len = 6'd0;
reg [3:0] soc_master_tx_fifo_source_payload_width = 4'd0;
reg [7:0] soc_master_tx_fifo_source_payload_mask = 8'd0;
wire soc_master_rx_fifo_sink_valid;
wire soc_master_rx_fifo_sink_ready;
wire soc_master_rx_fifo_sink_first;
wire soc_master_rx_fifo_sink_last;
wire [31:0] soc_master_rx_fifo_sink_payload_data;
reg soc_master_rx_fifo_source_valid = 1'd0;
wire soc_master_rx_fifo_source_ready;
reg soc_master_rx_fifo_source_first = 1'd0;
reg soc_master_rx_fifo_source_last = 1'd0;
reg [31:0] soc_master_rx_fifo_source_payload_data = 32'd0;
wire soc_port_master_user_port_source_valid;
wire soc_port_master_user_port_source_ready;
wire soc_port_master_user_port_source_first;
wire soc_port_master_user_port_source_last;
wire [31:0] soc_port_master_user_port_source_payload_data;
wire soc_port_master_user_port_sink_valid;
wire soc_port_master_user_port_sink_ready;
wire soc_port_master_user_port_sink_first;
wire soc_port_master_user_port_sink_last;
wire [31:0] soc_port_master_user_port_sink_payload_data;
wire [5:0] soc_port_master_user_port_sink_payload_len;
wire [3:0] soc_port_master_user_port_sink_payload_width;
wire [7:0] soc_port_master_user_port_sink_payload_mask;
wire soc_port_master_internal_port_source_valid;
wire soc_port_master_internal_port_source_ready;
wire soc_port_master_internal_port_source_first;
wire soc_port_master_internal_port_source_last;
wire [31:0] soc_port_master_internal_port_source_payload_data;
wire soc_port_master_internal_port_sink_valid;
wire soc_port_master_internal_port_sink_ready;
wire soc_port_master_internal_port_sink_first;
wire soc_port_master_internal_port_sink_last;
wire [31:0] soc_port_master_internal_port_sink_payload_data;
wire [5:0] soc_port_master_internal_port_sink_payload_len;
wire [3:0] soc_port_master_internal_port_sink_payload_width;
wire [7:0] soc_port_master_internal_port_sink_payload_mask;
wire soc_port_master_request;
reg soc_storage = 1'd0;
reg soc_re = 1'd0;
reg soc_chaser = 1'd0;
reg soc_mode = 1'd0;
wire soc_wait;
wire soc_done;
reg [24:0] soc_count = 25'd32142857;
reg [31:0] soc_load_storage = 32'd0;
reg soc_load_re = 1'd0;
reg [31:0] soc_reload_storage = 32'd0;
reg soc_reload_re = 1'd0;
reg soc_en_storage = 1'd0;
reg soc_en_re = 1'd0;
reg soc_update_value_storage = 1'd0;
reg soc_update_value_re = 1'd0;
reg [31:0] soc_value_status = 32'd0;
wire soc_value_we;
reg soc_value_re = 1'd0;
wire soc_irq;
wire soc_zero_status;
reg soc_zero_pending = 1'd0;
wire soc_zero_trigger;
reg soc_zero_clear = 1'd0;
reg soc_zero_trigger_d = 1'd0;
wire soc_zero0;
wire soc_status_status;
wire soc_status_we;
reg soc_status_re = 1'd0;
wire soc_zero1;
wire soc_pending_status;
wire soc_pending_we;
reg soc_pending_re = 1'd0;
reg soc_pending_r = 1'd0;
wire soc_zero2;
reg soc_enable_storage = 1'd0;
reg soc_enable_re = 1'd0;
reg [31:0] soc_value = 32'd0;
reg soc_uptime_latch_storage = 1'd0;
reg soc_uptime_latch_re = 1'd0;
reg [63:0] soc_uptime_cycles_status = 64'd0;
wire soc_uptime_cycles_we;
reg soc_uptime_cycles_re = 1'd0;
reg [63:0] soc_uptime_cycles = 64'd0;
reg [1:0] vns_litespiphy_state = 2'd0;
reg [1:0] vns_litespiphy_next_state = 2'd0;
reg soc_litespiddrphycore_en_litespiphy_next_value0 = 1'd0;
reg soc_litespiddrphycore_en_litespiphy_next_value_ce0 = 1'd0;
reg [7:0] soc_litespiddrphycore_sr_cnt_litespiphy_next_value1 = 8'd0;
reg soc_litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 = 1'd0;
wire [1:0] vns_litespi_request;
reg vns_litespi_grant = 1'd0;
reg vns_litespi_tx_mux_source_valid = 1'd0;
wire vns_litespi_tx_mux_source_ready;
reg vns_litespi_tx_mux_source_first = 1'd0;
reg vns_litespi_tx_mux_source_last = 1'd0;
reg [31:0] vns_litespi_tx_mux_source_payload_data = 32'd0;
reg [5:0] vns_litespi_tx_mux_source_payload_len = 6'd0;
reg [3:0] vns_litespi_tx_mux_source_payload_width = 4'd0;
reg [7:0] vns_litespi_tx_mux_source_payload_mask = 8'd0;
wire vns_litespi_tx_mux_endpoint0_sink_valid;
reg vns_litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire vns_litespi_tx_mux_endpoint0_sink_first;
wire vns_litespi_tx_mux_endpoint0_sink_last;
wire [31:0] vns_litespi_tx_mux_endpoint0_sink_payload_data;
wire [5:0] vns_litespi_tx_mux_endpoint0_sink_payload_len;
wire [3:0] vns_litespi_tx_mux_endpoint0_sink_payload_width;
wire [7:0] vns_litespi_tx_mux_endpoint0_sink_payload_mask;
wire vns_litespi_tx_mux_endpoint1_sink_valid;
reg vns_litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire vns_litespi_tx_mux_endpoint1_sink_first;
wire vns_litespi_tx_mux_endpoint1_sink_last;
wire [31:0] vns_litespi_tx_mux_endpoint1_sink_payload_data;
wire [5:0] vns_litespi_tx_mux_endpoint1_sink_payload_len;
wire [3:0] vns_litespi_tx_mux_endpoint1_sink_payload_width;
wire [7:0] vns_litespi_tx_mux_endpoint1_sink_payload_mask;
wire vns_litespi_tx_mux_sel;
wire vns_litespi_rx_demux_sink_valid;
reg vns_litespi_rx_demux_sink_ready = 1'd0;
wire vns_litespi_rx_demux_sink_first;
wire vns_litespi_rx_demux_sink_last;
wire [31:0] vns_litespi_rx_demux_sink_payload_data;
reg vns_litespi_rx_demux_endpoint0_source_valid = 1'd0;
wire vns_litespi_rx_demux_endpoint0_source_ready;
reg vns_litespi_rx_demux_endpoint0_source_first = 1'd0;
reg vns_litespi_rx_demux_endpoint0_source_last = 1'd0;
reg [31:0] vns_litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
reg vns_litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire vns_litespi_rx_demux_endpoint1_source_ready;
reg vns_litespi_rx_demux_endpoint1_source_first = 1'd0;
reg vns_litespi_rx_demux_endpoint1_source_last = 1'd0;
reg [31:0] vns_litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire vns_litespi_rx_demux_sel;
reg [3:0] vns_litespi_state = 4'd0;
reg [3:0] vns_litespi_next_state = 4'd0;
reg soc_litespimmap_burst_cs_litespi_next_value0 = 1'd0;
reg soc_litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
reg [29:0] soc_litespimmap_burst_adr_litespi_next_value1 = 30'd0;
reg soc_litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
reg [13:0] vns_hpssoc_adr = 14'd0;
reg vns_hpssoc_we = 1'd0;
reg [31:0] vns_hpssoc_dat_w = 32'd0;
wire [31:0] vns_hpssoc_dat_r;
wire [29:0] vns_hpssoc_wishbone_adr;
wire [31:0] vns_hpssoc_wishbone_dat_w;
reg [31:0] vns_hpssoc_wishbone_dat_r = 32'd0;
wire [3:0] vns_hpssoc_wishbone_sel;
wire vns_hpssoc_wishbone_cyc;
wire vns_hpssoc_wishbone_stb;
reg vns_hpssoc_wishbone_ack = 1'd0;
wire vns_hpssoc_wishbone_we;
wire [2:0] vns_hpssoc_wishbone_cti;
wire [1:0] vns_hpssoc_wishbone_bte;
reg vns_hpssoc_wishbone_err = 1'd0;
wire [29:0] vns_shared_adr;
wire [31:0] vns_shared_dat_w;
reg [31:0] vns_shared_dat_r = 32'd0;
wire [3:0] vns_shared_sel;
wire vns_shared_cyc;
wire vns_shared_stb;
reg vns_shared_ack = 1'd0;
wire vns_shared_we;
wire [2:0] vns_shared_cti;
wire [1:0] vns_shared_bte;
wire vns_shared_err;
wire [1:0] vns_request;
reg vns_grant = 1'd0;
reg [2:0] vns_slave_sel = 3'd0;
reg [2:0] vns_slave_sel_r = 3'd0;
reg vns_error = 1'd0;
wire vns_wait;
wire vns_done;
reg [19:0] vns_count = 20'd1000000;
wire [13:0] vns_interface0_bank_bus_adr;
wire vns_interface0_bank_bus_we;
wire [31:0] vns_interface0_bank_bus_dat_w;
reg [31:0] vns_interface0_bank_bus_dat_r = 32'd0;
reg vns_csrbank0_reset0_re = 1'd0;
wire [1:0] vns_csrbank0_reset0_r;
reg vns_csrbank0_reset0_we = 1'd0;
wire [1:0] vns_csrbank0_reset0_w;
reg vns_csrbank0_scratch0_re = 1'd0;
wire [31:0] vns_csrbank0_scratch0_r;
reg vns_csrbank0_scratch0_we = 1'd0;
wire [31:0] vns_csrbank0_scratch0_w;
reg vns_csrbank0_bus_errors_re = 1'd0;
wire [31:0] vns_csrbank0_bus_errors_r;
reg vns_csrbank0_bus_errors_we = 1'd0;
wire [31:0] vns_csrbank0_bus_errors_w;
wire vns_csrbank0_sel;
wire [13:0] vns_interface1_bank_bus_adr;
wire vns_interface1_bank_bus_we;
wire [31:0] vns_interface1_bank_bus_dat_w;
reg [31:0] vns_interface1_bank_bus_dat_r = 32'd0;
reg vns_csrbank1_out0_re = 1'd0;
wire vns_csrbank1_out0_r;
reg vns_csrbank1_out0_we = 1'd0;
wire vns_csrbank1_out0_w;
wire vns_csrbank1_sel;
wire [13:0] vns_interface2_bank_bus_adr;
wire vns_interface2_bank_bus_we;
wire [31:0] vns_interface2_bank_bus_dat_w;
reg [31:0] vns_interface2_bank_bus_dat_r = 32'd0;
reg vns_csrbank2_mmap_dummy_bits0_re = 1'd0;
wire [7:0] vns_csrbank2_mmap_dummy_bits0_r;
reg vns_csrbank2_mmap_dummy_bits0_we = 1'd0;
wire [7:0] vns_csrbank2_mmap_dummy_bits0_w;
reg vns_csrbank2_master_cs0_re = 1'd0;
wire vns_csrbank2_master_cs0_r;
reg vns_csrbank2_master_cs0_we = 1'd0;
wire vns_csrbank2_master_cs0_w;
reg vns_csrbank2_master_phyconfig0_re = 1'd0;
wire [23:0] vns_csrbank2_master_phyconfig0_r;
reg vns_csrbank2_master_phyconfig0_we = 1'd0;
wire [23:0] vns_csrbank2_master_phyconfig0_w;
reg vns_csrbank2_master_status_re = 1'd0;
wire [1:0] vns_csrbank2_master_status_r;
reg vns_csrbank2_master_status_we = 1'd0;
wire [1:0] vns_csrbank2_master_status_w;
wire vns_csrbank2_sel;
wire [13:0] vns_interface3_bank_bus_adr;
wire vns_interface3_bank_bus_we;
wire [31:0] vns_interface3_bank_bus_dat_w;
reg [31:0] vns_interface3_bank_bus_dat_r = 32'd0;
reg vns_csrbank3_load0_re = 1'd0;
wire [31:0] vns_csrbank3_load0_r;
reg vns_csrbank3_load0_we = 1'd0;
wire [31:0] vns_csrbank3_load0_w;
reg vns_csrbank3_reload0_re = 1'd0;
wire [31:0] vns_csrbank3_reload0_r;
reg vns_csrbank3_reload0_we = 1'd0;
wire [31:0] vns_csrbank3_reload0_w;
reg vns_csrbank3_en0_re = 1'd0;
wire vns_csrbank3_en0_r;
reg vns_csrbank3_en0_we = 1'd0;
wire vns_csrbank3_en0_w;
reg vns_csrbank3_update_value0_re = 1'd0;
wire vns_csrbank3_update_value0_r;
reg vns_csrbank3_update_value0_we = 1'd0;
wire vns_csrbank3_update_value0_w;
reg vns_csrbank3_value_re = 1'd0;
wire [31:0] vns_csrbank3_value_r;
reg vns_csrbank3_value_we = 1'd0;
wire [31:0] vns_csrbank3_value_w;
reg vns_csrbank3_ev_status_re = 1'd0;
wire vns_csrbank3_ev_status_r;
reg vns_csrbank3_ev_status_we = 1'd0;
wire vns_csrbank3_ev_status_w;
reg vns_csrbank3_ev_pending_re = 1'd0;
wire vns_csrbank3_ev_pending_r;
reg vns_csrbank3_ev_pending_we = 1'd0;
wire vns_csrbank3_ev_pending_w;
reg vns_csrbank3_ev_enable0_re = 1'd0;
wire vns_csrbank3_ev_enable0_r;
reg vns_csrbank3_ev_enable0_we = 1'd0;
wire vns_csrbank3_ev_enable0_w;
reg vns_csrbank3_uptime_latch0_re = 1'd0;
wire vns_csrbank3_uptime_latch0_r;
reg vns_csrbank3_uptime_latch0_we = 1'd0;
wire vns_csrbank3_uptime_latch0_w;
reg vns_csrbank3_uptime_cycles1_re = 1'd0;
wire [31:0] vns_csrbank3_uptime_cycles1_r;
reg vns_csrbank3_uptime_cycles1_we = 1'd0;
wire [31:0] vns_csrbank3_uptime_cycles1_w;
reg vns_csrbank3_uptime_cycles0_re = 1'd0;
wire [31:0] vns_csrbank3_uptime_cycles0_r;
reg vns_csrbank3_uptime_cycles0_we = 1'd0;
wire [31:0] vns_csrbank3_uptime_cycles0_w;
wire vns_csrbank3_sel;
wire [13:0] vns_csr_interconnect_adr;
wire vns_csr_interconnect_we;
wire [31:0] vns_csr_interconnect_dat_w;
wire [31:0] vns_csr_interconnect_dat_r;
reg vns_state = 1'd0;
reg vns_next_state = 1'd0;
reg [29:0] vns_array_muxed0 = 30'd0;
reg [31:0] vns_array_muxed1 = 32'd0;
reg [3:0] vns_array_muxed2 = 4'd0;
reg vns_array_muxed3 = 1'd0;
reg vns_array_muxed4 = 1'd0;
reg vns_array_muxed5 = 1'd0;
reg [2:0] vns_array_muxed6 = 3'd0;
reg [1:0] vns_array_muxed7 = 2'd0;
wire vns_rst1;
wire vns_latticenxddrtristateimpl0__o;
(* syn_useioff = 1 *) wire vns_latticenxddrtristateimpl0_oe;
wire vns_latticenxddrtristateimpl0__i;
wire vns_latticenxddrtristateimpl1__o;
(* syn_useioff = 1 *) wire vns_latticenxddrtristateimpl1_oe;
wire vns_latticenxddrtristateimpl1__i;
wire vns_latticenxddrtristateimpl2__o;
(* syn_useioff = 1 *) wire vns_latticenxddrtristateimpl2_oe;
wire vns_latticenxddrtristateimpl2__i;
wire vns_latticenxddrtristateimpl3__o;
(* syn_useioff = 1 *) wire vns_latticenxddrtristateimpl3_oe;
wire vns_latticenxddrtristateimpl3__i;

assign soc_reset = (soc_soc_rst | soc_cpu_rst);
assign soc_bus_error = vns_error;
assign soc_interrupt[0] = soc_irq;
assign por_clk = sys_clk;
assign sys_clk = soc_clkout;
assign soc_bus_errors_status = soc_bus_errors;
assign soc_datain0 = soc_bus_dat_w[31:0];
assign soc_datain1 = soc_bus_dat_w[31:0];
assign soc_datain2 = soc_bus_dat_w[31:0];
assign soc_datain3 = soc_bus_dat_w[31:0];
assign soc_datain4 = soc_bus_dat_w[31:0];
always @(*) begin
	soc_wren4 <= 1'd0;
	soc_wren0 <= 1'd0;
	soc_cs3 <= 1'd0;
	soc_bus_dat_r <= 32'd0;
	soc_wren3 <= 1'd0;
	soc_cs2 <= 1'd0;
	soc_wren2 <= 1'd0;
	soc_cs1 <= 1'd0;
	soc_wren1 <= 1'd0;
	soc_cs0 <= 1'd0;
	soc_cs4 <= 1'd0;
	if ((soc_bus_adr[16:14] == 1'd0)) begin
		soc_cs0 <= 1'd1;
		soc_wren0 <= ((soc_bus_we & soc_bus_stb) & soc_bus_cyc);
		soc_bus_dat_r[31:0] <= soc_dataout0;
	end
	if ((soc_bus_adr[16:14] == 1'd1)) begin
		soc_cs1 <= 1'd1;
		soc_wren1 <= ((soc_bus_we & soc_bus_stb) & soc_bus_cyc);
		soc_bus_dat_r[31:0] <= soc_dataout1;
	end
	if ((soc_bus_adr[16:14] == 2'd2)) begin
		soc_cs2 <= 1'd1;
		soc_wren2 <= ((soc_bus_we & soc_bus_stb) & soc_bus_cyc);
		soc_bus_dat_r[31:0] <= soc_dataout2;
	end
	if ((soc_bus_adr[16:14] == 2'd3)) begin
		soc_cs3 <= 1'd1;
		soc_wren3 <= ((soc_bus_we & soc_bus_stb) & soc_bus_cyc);
		soc_bus_dat_r[31:0] <= soc_dataout3;
	end
	if ((soc_bus_adr[16:14] == 3'd4)) begin
		soc_cs4 <= 1'd1;
		soc_wren4 <= ((soc_bus_we & soc_bus_stb) & soc_bus_cyc);
		soc_bus_dat_r[31:0] <= soc_dataout4;
	end
end
assign soc_litespiddrphycore_wait = soc_litespiddrphycore_cs;
assign soc_litespiddrphycore_cs_enable = soc_litespiddrphycore_done;
assign spiflash4x_cs_n = (~soc_litespiddrphycore_cs_enable);
assign soc_litespiddrphycore5 = soc_litespiddrphycore_sink_payload_mask;
always @(*) begin
	soc_litespiddrphycore1 <= 4'd0;
	case (soc_litespiddrphycore_sink_payload_width)
		1'd1: begin
			soc_litespiddrphycore1 <= soc_litespiddrphycore_sr_out[31];
		end
		2'd2: begin
			soc_litespiddrphycore1 <= soc_litespiddrphycore_sr_out[31:30];
		end
		3'd4: begin
			soc_litespiddrphycore1 <= soc_litespiddrphycore_sr_out[31:28];
		end
		4'd8: begin
			soc_litespiddrphycore1 <= soc_litespiddrphycore_sr_out[31:24];
		end
	endcase
end
assign soc_litespiddrphycore_source_payload_data = soc_litespiddrphycore_sr_in;
assign soc_litespiddrphycore_done = (soc_litespiddrphycore_count == 1'd0);
always @(*) begin
	soc_litespiddrphycore_source_last <= 1'd0;
	soc_litespiddrphycore_sr_out_shift <= 1'd0;
	soc_litespiddrphycore_sink_ready <= 1'd0;
	vns_litespiphy_next_state <= 2'd0;
	soc_litespiddrphycore_en_litespiphy_next_value0 <= 1'd0;
	soc_litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd0;
	soc_litespiddrphycore_sr_out_load <= 1'd0;
	soc_litespiddrphycore_sr_in_shift <= 1'd0;
	soc_litespiddrphycore_sr_cnt_litespiphy_next_value1 <= 8'd0;
	soc_litespiddrphycore_source_valid <= 1'd0;
	soc_litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd0;
	vns_litespiphy_next_state <= vns_litespiphy_state;
	case (vns_litespiphy_state)
		1'd1: begin
			soc_litespiddrphycore_en_litespiphy_next_value0 <= 1'd1;
			soc_litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd1;
			soc_litespiddrphycore_sr_in_shift <= 1'd1;
			soc_litespiddrphycore_sr_out_shift <= 1'd1;
			soc_litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (soc_litespiddrphycore_sr_cnt - soc_litespiddrphycore_sink_payload_width);
			soc_litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
			if ((soc_litespiddrphycore_sr_cnt == 1'd0)) begin
				soc_litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (3'd4 * soc_litespiddrphycore_sink_payload_width);
				soc_litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
				vns_litespiphy_next_state <= 2'd2;
			end
		end
		2'd2: begin
			soc_litespiddrphycore_en_litespiphy_next_value0 <= 1'd0;
			soc_litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd1;
			soc_litespiddrphycore_sr_in_shift <= 1'd1;
			soc_litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (soc_litespiddrphycore_sr_cnt - soc_litespiddrphycore_sink_payload_width);
			soc_litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
			if ((soc_litespiddrphycore_sr_cnt == 1'd0)) begin
				soc_litespiddrphycore_sink_ready <= 1'd1;
				vns_litespiphy_next_state <= 2'd3;
			end
		end
		2'd3: begin
			soc_litespiddrphycore_source_valid <= 1'd1;
			soc_litespiddrphycore_source_last <= 1'd1;
			if (soc_litespiddrphycore_source_ready) begin
				vns_litespiphy_next_state <= 1'd0;
			end
		end
		default: begin
			soc_litespiddrphycore_en_litespiphy_next_value0 <= 1'd0;
			soc_litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd1;
			if ((soc_litespiddrphycore_cs_enable & soc_litespiddrphycore_sink_valid)) begin
				soc_litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (soc_litespiddrphycore_sink_payload_len - soc_litespiddrphycore_sink_payload_width);
				soc_litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
				soc_litespiddrphycore_sr_out_load <= 1'd1;
				vns_litespiphy_next_state <= 1'd1;
			end
		end
	endcase
end
assign soc_litespiddrphycore_cs = soc_crossbar_cs;
assign soc_litespimmap_sink_valid = soc_port_mmap_user_port_source_valid;
assign soc_port_mmap_user_port_source_ready = soc_litespimmap_sink_ready;
assign soc_litespimmap_sink_first = soc_port_mmap_user_port_source_first;
assign soc_litespimmap_sink_last = soc_port_mmap_user_port_source_last;
assign soc_litespimmap_sink_payload_data = soc_port_mmap_user_port_source_payload_data;
assign soc_port_mmap_user_port_sink_valid = soc_litespimmap_source_valid;
assign soc_litespimmap_source_ready = soc_port_mmap_user_port_sink_ready;
assign soc_port_mmap_user_port_sink_first = soc_litespimmap_source_first;
assign soc_port_mmap_user_port_sink_last = soc_litespimmap_source_last;
assign soc_port_mmap_user_port_sink_payload_data = soc_litespimmap_source_payload_data;
assign soc_port_mmap_user_port_sink_payload_len = soc_litespimmap_source_payload_len;
assign soc_port_mmap_user_port_sink_payload_width = soc_litespimmap_source_payload_width;
assign soc_port_mmap_user_port_sink_payload_mask = soc_litespimmap_source_payload_mask;
assign soc_master_sink_sink_valid = soc_port_master_user_port_source_valid;
assign soc_port_master_user_port_source_ready = soc_master_sink_sink_ready;
assign soc_master_sink_sink_first = soc_port_master_user_port_source_first;
assign soc_master_sink_sink_last = soc_port_master_user_port_source_last;
assign soc_master_sink_sink_payload_data = soc_port_master_user_port_source_payload_data;
assign soc_port_master_user_port_sink_valid = soc_master_source_source_valid;
assign soc_master_source_source_ready = soc_port_master_user_port_sink_ready;
assign soc_port_master_user_port_sink_first = soc_master_source_source_first;
assign soc_port_master_user_port_sink_last = soc_master_source_source_last;
assign soc_port_master_user_port_sink_payload_data = soc_master_source_source_payload_data;
assign soc_port_master_user_port_sink_payload_len = soc_master_source_source_payload_len;
assign soc_port_master_user_port_sink_payload_width = soc_master_source_source_payload_width;
assign soc_port_master_user_port_sink_payload_mask = soc_master_source_source_payload_mask;
assign soc_litespiddrphycore_sink_valid = soc_crossbar_source_valid;
assign soc_crossbar_source_ready = soc_litespiddrphycore_sink_ready;
assign soc_litespiddrphycore_sink_first = soc_crossbar_source_first;
assign soc_litespiddrphycore_sink_last = soc_crossbar_source_last;
assign soc_litespiddrphycore_sink_payload_data = soc_crossbar_source_payload_data;
assign soc_litespiddrphycore_sink_payload_len = soc_crossbar_source_payload_len;
assign soc_litespiddrphycore_sink_payload_width = soc_crossbar_source_payload_width;
assign soc_litespiddrphycore_sink_payload_mask = soc_crossbar_source_payload_mask;
assign soc_crossbar_sink_valid = soc_litespiddrphycore_source_valid;
assign soc_litespiddrphycore_source_ready = soc_crossbar_sink_ready;
assign soc_crossbar_sink_first = soc_litespiddrphycore_source_first;
assign soc_crossbar_sink_last = soc_litespiddrphycore_source_last;
assign soc_crossbar_sink_payload_data = soc_litespiddrphycore_source_payload_data;
assign soc_port_mmap_internal_port_sink_valid = soc_port_mmap_user_port_sink_valid;
assign soc_port_mmap_user_port_sink_ready = soc_port_mmap_internal_port_sink_ready;
assign soc_port_mmap_internal_port_sink_first = soc_port_mmap_user_port_sink_first;
assign soc_port_mmap_internal_port_sink_last = soc_port_mmap_user_port_sink_last;
assign soc_port_mmap_internal_port_sink_payload_data = soc_port_mmap_user_port_sink_payload_data;
assign soc_port_mmap_internal_port_sink_payload_len = soc_port_mmap_user_port_sink_payload_len;
assign soc_port_mmap_internal_port_sink_payload_width = soc_port_mmap_user_port_sink_payload_width;
assign soc_port_mmap_internal_port_sink_payload_mask = soc_port_mmap_user_port_sink_payload_mask;
assign soc_port_mmap_user_port_source_valid = soc_port_mmap_internal_port_source_valid;
assign soc_port_mmap_internal_port_source_ready = soc_port_mmap_user_port_source_ready;
assign soc_port_mmap_user_port_source_first = soc_port_mmap_internal_port_source_first;
assign soc_port_mmap_user_port_source_last = soc_port_mmap_internal_port_source_last;
assign soc_port_mmap_user_port_source_payload_data = soc_port_mmap_internal_port_source_payload_data;
assign soc_port_mmap_request = soc_litespimmap_cs;
assign soc_port_master_internal_port_sink_valid = soc_port_master_user_port_sink_valid;
assign soc_port_master_user_port_sink_ready = soc_port_master_internal_port_sink_ready;
assign soc_port_master_internal_port_sink_first = soc_port_master_user_port_sink_first;
assign soc_port_master_internal_port_sink_last = soc_port_master_user_port_sink_last;
assign soc_port_master_internal_port_sink_payload_data = soc_port_master_user_port_sink_payload_data;
assign soc_port_master_internal_port_sink_payload_len = soc_port_master_user_port_sink_payload_len;
assign soc_port_master_internal_port_sink_payload_width = soc_port_master_user_port_sink_payload_width;
assign soc_port_master_internal_port_sink_payload_mask = soc_port_master_user_port_sink_payload_mask;
assign soc_port_master_user_port_source_valid = soc_port_master_internal_port_source_valid;
assign soc_port_master_internal_port_source_ready = soc_port_master_user_port_source_ready;
assign soc_port_master_user_port_source_first = soc_port_master_internal_port_source_first;
assign soc_port_master_user_port_source_last = soc_port_master_internal_port_source_last;
assign soc_port_master_user_port_source_payload_data = soc_port_master_internal_port_source_payload_data;
assign soc_port_master_request = soc_master_cs;
assign vns_litespi_tx_mux_endpoint0_sink_valid = soc_port_mmap_internal_port_sink_valid;
assign soc_port_mmap_internal_port_sink_ready = vns_litespi_tx_mux_endpoint0_sink_ready;
assign vns_litespi_tx_mux_endpoint0_sink_first = soc_port_mmap_internal_port_sink_first;
assign vns_litespi_tx_mux_endpoint0_sink_last = soc_port_mmap_internal_port_sink_last;
assign vns_litespi_tx_mux_endpoint0_sink_payload_data = soc_port_mmap_internal_port_sink_payload_data;
assign vns_litespi_tx_mux_endpoint0_sink_payload_len = soc_port_mmap_internal_port_sink_payload_len;
assign vns_litespi_tx_mux_endpoint0_sink_payload_width = soc_port_mmap_internal_port_sink_payload_width;
assign vns_litespi_tx_mux_endpoint0_sink_payload_mask = soc_port_mmap_internal_port_sink_payload_mask;
assign soc_port_mmap_internal_port_source_valid = vns_litespi_rx_demux_endpoint0_source_valid;
assign vns_litespi_rx_demux_endpoint0_source_ready = soc_port_mmap_internal_port_source_ready;
assign soc_port_mmap_internal_port_source_first = vns_litespi_rx_demux_endpoint0_source_first;
assign soc_port_mmap_internal_port_source_last = vns_litespi_rx_demux_endpoint0_source_last;
assign soc_port_mmap_internal_port_source_payload_data = vns_litespi_rx_demux_endpoint0_source_payload_data;
assign vns_litespi_tx_mux_endpoint1_sink_valid = soc_port_master_internal_port_sink_valid;
assign soc_port_master_internal_port_sink_ready = vns_litespi_tx_mux_endpoint1_sink_ready;
assign vns_litespi_tx_mux_endpoint1_sink_first = soc_port_master_internal_port_sink_first;
assign vns_litespi_tx_mux_endpoint1_sink_last = soc_port_master_internal_port_sink_last;
assign vns_litespi_tx_mux_endpoint1_sink_payload_data = soc_port_master_internal_port_sink_payload_data;
assign vns_litespi_tx_mux_endpoint1_sink_payload_len = soc_port_master_internal_port_sink_payload_len;
assign vns_litespi_tx_mux_endpoint1_sink_payload_width = soc_port_master_internal_port_sink_payload_width;
assign vns_litespi_tx_mux_endpoint1_sink_payload_mask = soc_port_master_internal_port_sink_payload_mask;
assign soc_port_master_internal_port_source_valid = vns_litespi_rx_demux_endpoint1_source_valid;
assign vns_litespi_rx_demux_endpoint1_source_ready = soc_port_master_internal_port_source_ready;
assign soc_port_master_internal_port_source_first = vns_litespi_rx_demux_endpoint1_source_first;
assign soc_port_master_internal_port_source_last = vns_litespi_rx_demux_endpoint1_source_last;
assign soc_port_master_internal_port_source_payload_data = vns_litespi_rx_demux_endpoint1_source_payload_data;
assign vns_litespi_request = {soc_port_master_request, soc_port_mmap_request};
assign soc_crossbar_source_valid = vns_litespi_tx_mux_source_valid;
assign vns_litespi_tx_mux_source_ready = soc_crossbar_source_ready;
assign soc_crossbar_source_first = vns_litespi_tx_mux_source_first;
assign soc_crossbar_source_last = vns_litespi_tx_mux_source_last;
assign soc_crossbar_source_payload_data = vns_litespi_tx_mux_source_payload_data;
assign soc_crossbar_source_payload_len = vns_litespi_tx_mux_source_payload_len;
assign soc_crossbar_source_payload_width = vns_litespi_tx_mux_source_payload_width;
assign soc_crossbar_source_payload_mask = vns_litespi_tx_mux_source_payload_mask;
assign vns_litespi_tx_mux_sel = vns_litespi_grant;
assign vns_litespi_rx_demux_sink_valid = soc_crossbar_sink_valid;
assign soc_crossbar_sink_ready = vns_litespi_rx_demux_sink_ready;
assign vns_litespi_rx_demux_sink_first = soc_crossbar_sink_first;
assign vns_litespi_rx_demux_sink_last = soc_crossbar_sink_last;
assign vns_litespi_rx_demux_sink_payload_data = soc_crossbar_sink_payload_data;
assign vns_litespi_rx_demux_sel = vns_litespi_grant;
always @(*) begin
	soc_crossbar_cs <= 1'd0;
	case (vns_litespi_grant)
		1'd0: begin
			soc_crossbar_cs <= soc_litespimmap_cs;
		end
		1'd1: begin
			soc_crossbar_cs <= soc_master_cs;
		end
	endcase
end
always @(*) begin
	vns_litespi_tx_mux_source_valid <= 1'd0;
	vns_litespi_tx_mux_endpoint1_sink_ready <= 1'd0;
	vns_litespi_tx_mux_source_first <= 1'd0;
	vns_litespi_tx_mux_source_last <= 1'd0;
	vns_litespi_tx_mux_source_payload_data <= 32'd0;
	vns_litespi_tx_mux_source_payload_len <= 6'd0;
	vns_litespi_tx_mux_source_payload_width <= 4'd0;
	vns_litespi_tx_mux_source_payload_mask <= 8'd0;
	vns_litespi_tx_mux_endpoint0_sink_ready <= 1'd0;
	case (vns_litespi_tx_mux_sel)
		1'd0: begin
			vns_litespi_tx_mux_source_valid <= vns_litespi_tx_mux_endpoint0_sink_valid;
			vns_litespi_tx_mux_endpoint0_sink_ready <= vns_litespi_tx_mux_source_ready;
			vns_litespi_tx_mux_source_first <= vns_litespi_tx_mux_endpoint0_sink_first;
			vns_litespi_tx_mux_source_last <= vns_litespi_tx_mux_endpoint0_sink_last;
			vns_litespi_tx_mux_source_payload_data <= vns_litespi_tx_mux_endpoint0_sink_payload_data;
			vns_litespi_tx_mux_source_payload_len <= vns_litespi_tx_mux_endpoint0_sink_payload_len;
			vns_litespi_tx_mux_source_payload_width <= vns_litespi_tx_mux_endpoint0_sink_payload_width;
			vns_litespi_tx_mux_source_payload_mask <= vns_litespi_tx_mux_endpoint0_sink_payload_mask;
		end
		1'd1: begin
			vns_litespi_tx_mux_source_valid <= vns_litespi_tx_mux_endpoint1_sink_valid;
			vns_litespi_tx_mux_endpoint1_sink_ready <= vns_litespi_tx_mux_source_ready;
			vns_litespi_tx_mux_source_first <= vns_litespi_tx_mux_endpoint1_sink_first;
			vns_litespi_tx_mux_source_last <= vns_litespi_tx_mux_endpoint1_sink_last;
			vns_litespi_tx_mux_source_payload_data <= vns_litespi_tx_mux_endpoint1_sink_payload_data;
			vns_litespi_tx_mux_source_payload_len <= vns_litespi_tx_mux_endpoint1_sink_payload_len;
			vns_litespi_tx_mux_source_payload_width <= vns_litespi_tx_mux_endpoint1_sink_payload_width;
			vns_litespi_tx_mux_source_payload_mask <= vns_litespi_tx_mux_endpoint1_sink_payload_mask;
		end
	endcase
end
always @(*) begin
	vns_litespi_rx_demux_endpoint0_source_first <= 1'd0;
	vns_litespi_rx_demux_endpoint0_source_last <= 1'd0;
	vns_litespi_rx_demux_endpoint0_source_payload_data <= 32'd0;
	vns_litespi_rx_demux_endpoint1_source_valid <= 1'd0;
	vns_litespi_rx_demux_endpoint1_source_first <= 1'd0;
	vns_litespi_rx_demux_endpoint1_source_last <= 1'd0;
	vns_litespi_rx_demux_endpoint1_source_payload_data <= 32'd0;
	vns_litespi_rx_demux_sink_ready <= 1'd0;
	vns_litespi_rx_demux_endpoint0_source_valid <= 1'd0;
	case (vns_litespi_rx_demux_sel)
		1'd0: begin
			vns_litespi_rx_demux_endpoint0_source_valid <= vns_litespi_rx_demux_sink_valid;
			vns_litespi_rx_demux_sink_ready <= vns_litespi_rx_demux_endpoint0_source_ready;
			vns_litespi_rx_demux_endpoint0_source_first <= vns_litespi_rx_demux_sink_first;
			vns_litespi_rx_demux_endpoint0_source_last <= vns_litespi_rx_demux_sink_last;
			vns_litespi_rx_demux_endpoint0_source_payload_data <= vns_litespi_rx_demux_sink_payload_data;
		end
		1'd1: begin
			vns_litespi_rx_demux_endpoint1_source_valid <= vns_litespi_rx_demux_sink_valid;
			vns_litespi_rx_demux_sink_ready <= vns_litespi_rx_demux_endpoint1_source_ready;
			vns_litespi_rx_demux_endpoint1_source_first <= vns_litespi_rx_demux_sink_first;
			vns_litespi_rx_demux_endpoint1_source_last <= vns_litespi_rx_demux_sink_last;
			vns_litespi_rx_demux_endpoint1_source_payload_data <= vns_litespi_rx_demux_sink_payload_data;
		end
	endcase
end
assign soc_litespimmap_spi_dummy_bits = soc_litespimmap_storage;
assign soc_litespimmap_done = (soc_litespimmap_count == 1'd0);
always @(*) begin
	soc_litespimmap_cs <= 1'd0;
	soc_litespimmap_wait <= 1'd0;
	soc_litespimmap_source_valid <= 1'd0;
	soc_litespimmap_source_last <= 1'd0;
	soc_litespimmap_source_payload_data <= 32'd0;
	vns_litespi_next_state <= 4'd0;
	soc_litespimmap_source_payload_len <= 6'd0;
	soc_litespimmap_burst_cs_litespi_next_value0 <= 1'd0;
	soc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd0;
	soc_litespimmap_source_payload_width <= 4'd0;
	soc_litespimmap_source_payload_mask <= 8'd0;
	soc_litespimmap_sink_ready <= 1'd0;
	soc_litespimmap_burst_adr_litespi_next_value1 <= 30'd0;
	soc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd0;
	soc_litespimmap_bus_dat_r <= 32'd0;
	soc_litespimmap_bus_ack <= 1'd0;
	vns_litespi_next_state <= vns_litespi_state;
	case (vns_litespi_state)
		1'd1: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_source_valid <= 1'd1;
			soc_litespimmap_source_payload_data <= 7'd107;
			soc_litespimmap_source_payload_len <= 4'd8;
			soc_litespimmap_source_payload_width <= 1'd1;
			soc_litespimmap_source_payload_mask <= 1'd1;
			soc_litespimmap_burst_adr_litespi_next_value1 <= soc_litespimmap_bus_adr;
			soc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (soc_litespimmap_source_ready) begin
				vns_litespi_next_state <= 2'd2;
			end
		end
		2'd2: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_sink_ready <= 1'd1;
			if (soc_litespimmap_sink_valid) begin
				vns_litespi_next_state <= 2'd3;
			end
		end
		2'd3: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_source_valid <= 1'd1;
			soc_litespimmap_source_payload_width <= 1'd1;
			soc_litespimmap_source_payload_mask <= 1'd1;
			soc_litespimmap_source_payload_data <= {soc_litespimmap_bus_adr, soc_litespimmap};
			soc_litespimmap_source_payload_len <= 5'd24;
			soc_litespimmap_burst_cs_litespi_next_value0 <= 1'd1;
			soc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			soc_litespimmap_burst_adr_litespi_next_value1 <= soc_litespimmap_bus_adr;
			soc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (soc_litespimmap_source_ready) begin
				vns_litespi_next_state <= 3'd4;
			end
		end
		3'd4: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_sink_ready <= 1'd1;
			if (soc_litespimmap_sink_valid) begin
				if ((soc_litespimmap_spi_dummy_bits == 1'd0)) begin
					vns_litespi_next_state <= 3'd7;
				end else begin
					vns_litespi_next_state <= 3'd5;
				end
			end
		end
		3'd5: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_source_valid <= 1'd1;
			soc_litespimmap_source_payload_width <= 1'd1;
			soc_litespimmap_source_payload_mask <= 1'd1;
			soc_litespimmap_source_payload_data <= soc_litespimmap_dummy;
			soc_litespimmap_source_payload_len <= soc_litespimmap_spi_dummy_bits;
			soc_litespimmap_burst_cs_litespi_next_value0 <= 1'd1;
			soc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			soc_litespimmap_burst_adr_litespi_next_value1 <= soc_litespimmap_bus_adr;
			soc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (soc_litespimmap_source_ready) begin
				vns_litespi_next_state <= 3'd6;
			end
		end
		3'd6: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_sink_ready <= 1'd1;
			if (soc_litespimmap_sink_valid) begin
				vns_litespi_next_state <= 3'd7;
			end
		end
		3'd7: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_source_valid <= 1'd1;
			soc_litespimmap_source_last <= 1'd1;
			soc_litespimmap_source_payload_width <= 3'd4;
			soc_litespimmap_source_payload_len <= 6'd32;
			soc_litespimmap_source_payload_mask <= 1'd0;
			if (soc_litespimmap_source_ready) begin
				vns_litespi_next_state <= 4'd8;
			end
		end
		4'd8: begin
			soc_litespimmap_cs <= 1'd1;
			soc_litespimmap_sink_ready <= 1'd1;
			soc_litespimmap_bus_dat_r <= {soc_litespimmap_sink_payload_data[7:0], soc_litespimmap_sink_payload_data[15:8], soc_litespimmap_sink_payload_data[23:16], soc_litespimmap_sink_payload_data[31:24]};
			if (soc_litespimmap_sink_valid) begin
				soc_litespimmap_bus_ack <= 1'd1;
				soc_litespimmap_burst_adr_litespi_next_value1 <= (soc_litespimmap_burst_adr + 1'd1);
				soc_litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
				vns_litespi_next_state <= 1'd0;
			end
		end
		default: begin
			soc_litespimmap_wait <= 1'd1;
			soc_litespimmap_burst_cs_litespi_next_value0 <= (soc_litespimmap_burst_cs & (~soc_litespimmap_done));
			soc_litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			soc_litespimmap_cs <= soc_litespimmap_burst_cs;
			if (((soc_litespimmap_bus_cyc & soc_litespimmap_bus_stb) & (~soc_litespimmap_bus_we))) begin
				if ((soc_litespimmap_burst_cs & (soc_litespimmap_bus_adr == soc_litespimmap_burst_adr))) begin
					vns_litespi_next_state <= 3'd7;
				end else begin
					soc_litespimmap_cs <= 1'd0;
					vns_litespi_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign soc_master_rx_fifo_sink_valid = soc_master_sink_sink_valid;
assign soc_master_sink_sink_ready = soc_master_rx_fifo_sink_ready;
assign soc_master_rx_fifo_sink_first = soc_master_sink_sink_first;
assign soc_master_rx_fifo_sink_last = soc_master_sink_sink_last;
assign soc_master_rx_fifo_sink_payload_data = soc_master_sink_sink_payload_data;
assign soc_master_source_source_valid = soc_master_tx_fifo_source_valid;
assign soc_master_tx_fifo_source_ready = soc_master_source_source_ready;
assign soc_master_source_source_first = soc_master_tx_fifo_source_first;
assign soc_master_source_source_last = soc_master_tx_fifo_source_last;
assign soc_master_source_source_payload_data = soc_master_tx_fifo_source_payload_data;
assign soc_master_source_source_payload_len = soc_master_tx_fifo_source_payload_len;
assign soc_master_source_source_payload_width = soc_master_tx_fifo_source_payload_width;
assign soc_master_source_source_payload_mask = soc_master_tx_fifo_source_payload_mask;
assign soc_master_cs = soc_master_cs_storage;
assign soc_master_tx_fifo_sink_valid = soc_master_rxtx_re;
assign soc_master_tx_ready = soc_master_tx_fifo_sink_ready;
assign soc_master_tx_fifo_sink_payload_data = soc_master_rxtx_r;
assign soc_master_tx_fifo_sink_payload_len = soc_master_len;
assign soc_master_tx_fifo_sink_payload_width = soc_master_width;
assign soc_master_tx_fifo_sink_payload_mask = soc_master_mask;
assign soc_master_tx_fifo_sink_last = 1'd1;
assign soc_master_rx_fifo_source_ready = soc_master_rxtx_we;
assign soc_master_rx_ready = soc_master_rx_fifo_source_valid;
assign soc_master_rxtx_w = soc_master_rx_fifo_source_payload_data;
assign soc_master_tx_fifo_sink_ready = ((~soc_master_tx_fifo_source_valid) | soc_master_tx_fifo_source_ready);
assign soc_master_rx_fifo_sink_ready = ((~soc_master_rx_fifo_source_valid) | soc_master_rx_fifo_source_ready);
assign soc_wait = (~soc_done);
always @(*) begin
	user_led0 <= 1'd0;
	if ((soc_mode == 1'd1)) begin
		{user_led0} <= soc_storage;
	end else begin
		{user_led0} <= soc_chaser;
	end
end
assign soc_done = (soc_count == 1'd0);
assign soc_zero_trigger = (soc_value == 1'd0);
assign soc_zero0 = soc_zero_status;
assign soc_zero1 = soc_zero_pending;
always @(*) begin
	soc_zero_clear <= 1'd0;
	if ((soc_pending_re & soc_pending_r)) begin
		soc_zero_clear <= 1'd1;
	end
end
assign soc_irq = (soc_pending_status & soc_enable_storage);
assign soc_zero_status = soc_zero_trigger;
always @(*) begin
	vns_hpssoc_adr <= 14'd0;
	vns_hpssoc_we <= 1'd0;
	vns_hpssoc_wishbone_ack <= 1'd0;
	vns_next_state <= 1'd0;
	vns_hpssoc_dat_w <= 32'd0;
	vns_hpssoc_wishbone_dat_r <= 32'd0;
	vns_next_state <= vns_state;
	case (vns_state)
		1'd1: begin
			vns_hpssoc_wishbone_ack <= 1'd1;
			vns_hpssoc_wishbone_dat_r <= vns_hpssoc_dat_r;
			vns_next_state <= 1'd0;
		end
		default: begin
			vns_hpssoc_dat_w <= vns_hpssoc_wishbone_dat_w;
			if ((vns_hpssoc_wishbone_cyc & vns_hpssoc_wishbone_stb)) begin
				vns_hpssoc_adr <= vns_hpssoc_wishbone_adr;
				vns_hpssoc_we <= (vns_hpssoc_wishbone_we & (vns_hpssoc_wishbone_sel != 1'd0));
				vns_next_state <= 1'd1;
			end
		end
	endcase
end
assign vns_shared_adr = vns_array_muxed0;
assign vns_shared_dat_w = vns_array_muxed1;
assign vns_shared_sel = vns_array_muxed2;
assign vns_shared_cyc = vns_array_muxed3;
assign vns_shared_stb = vns_array_muxed4;
assign vns_shared_we = vns_array_muxed5;
assign vns_shared_cti = vns_array_muxed6;
assign vns_shared_bte = vns_array_muxed7;
assign soc_ibus_dat_r = vns_shared_dat_r;
assign soc_dbus_dat_r = vns_shared_dat_r;
assign soc_ibus_ack = (vns_shared_ack & (vns_grant == 1'd0));
assign soc_dbus_ack = (vns_shared_ack & (vns_grant == 1'd1));
assign soc_ibus_err = (vns_shared_err & (vns_grant == 1'd0));
assign soc_dbus_err = (vns_shared_err & (vns_grant == 1'd1));
assign vns_request = {soc_dbus_cyc, soc_ibus_cyc};
always @(*) begin
	vns_slave_sel <= 3'd0;
	vns_slave_sel[0] <= (vns_shared_adr[29:17] == 12'd2048);
	vns_slave_sel[1] <= (vns_shared_adr[29:22] == 6'd32);
	vns_slave_sel[2] <= (vns_shared_adr[29:14] == 16'd61440);
end
assign soc_bus_adr = vns_shared_adr;
assign soc_bus_dat_w = vns_shared_dat_w;
assign soc_bus_sel = vns_shared_sel;
assign soc_bus_stb = vns_shared_stb;
assign soc_bus_we = vns_shared_we;
assign soc_bus_cti = vns_shared_cti;
assign soc_bus_bte = vns_shared_bte;
assign soc_litespimmap_bus_adr = vns_shared_adr;
assign soc_litespimmap_bus_dat_w = vns_shared_dat_w;
assign soc_litespimmap_bus_sel = vns_shared_sel;
assign soc_litespimmap_bus_stb = vns_shared_stb;
assign soc_litespimmap_bus_we = vns_shared_we;
assign soc_litespimmap_bus_cti = vns_shared_cti;
assign soc_litespimmap_bus_bte = vns_shared_bte;
assign vns_hpssoc_wishbone_adr = vns_shared_adr;
assign vns_hpssoc_wishbone_dat_w = vns_shared_dat_w;
assign vns_hpssoc_wishbone_sel = vns_shared_sel;
assign vns_hpssoc_wishbone_stb = vns_shared_stb;
assign vns_hpssoc_wishbone_we = vns_shared_we;
assign vns_hpssoc_wishbone_cti = vns_shared_cti;
assign vns_hpssoc_wishbone_bte = vns_shared_bte;
assign soc_bus_cyc = (vns_shared_cyc & vns_slave_sel[0]);
assign soc_litespimmap_bus_cyc = (vns_shared_cyc & vns_slave_sel[1]);
assign vns_hpssoc_wishbone_cyc = (vns_shared_cyc & vns_slave_sel[2]);
assign vns_shared_err = ((soc_bus_err | soc_litespimmap_bus_err) | vns_hpssoc_wishbone_err);
assign vns_wait = ((vns_shared_stb & vns_shared_cyc) & (~vns_shared_ack));
always @(*) begin
	vns_shared_dat_r <= 32'd0;
	vns_error <= 1'd0;
	vns_shared_ack <= 1'd0;
	vns_shared_ack <= ((soc_bus_ack | soc_litespimmap_bus_ack) | vns_hpssoc_wishbone_ack);
	vns_shared_dat_r <= ((({32{vns_slave_sel_r[0]}} & soc_bus_dat_r) | ({32{vns_slave_sel_r[1]}} & soc_litespimmap_bus_dat_r)) | ({32{vns_slave_sel_r[2]}} & vns_hpssoc_wishbone_dat_r));
	if (vns_done) begin
		vns_shared_dat_r <= 32'd4294967295;
		vns_shared_ack <= 1'd1;
		vns_error <= 1'd1;
	end
end
assign vns_done = (vns_count == 1'd0);
assign vns_csrbank0_sel = (vns_interface0_bank_bus_adr[13:9] == 2'd3);
assign vns_csrbank0_reset0_r = vns_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	vns_csrbank0_reset0_we <= 1'd0;
	vns_csrbank0_reset0_re <= 1'd0;
	if ((vns_csrbank0_sel & (vns_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		vns_csrbank0_reset0_re <= vns_interface0_bank_bus_we;
		vns_csrbank0_reset0_we <= (~vns_interface0_bank_bus_we);
	end
end
assign vns_csrbank0_scratch0_r = vns_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	vns_csrbank0_scratch0_re <= 1'd0;
	vns_csrbank0_scratch0_we <= 1'd0;
	if ((vns_csrbank0_sel & (vns_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		vns_csrbank0_scratch0_re <= vns_interface0_bank_bus_we;
		vns_csrbank0_scratch0_we <= (~vns_interface0_bank_bus_we);
	end
end
assign vns_csrbank0_bus_errors_r = vns_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	vns_csrbank0_bus_errors_we <= 1'd0;
	vns_csrbank0_bus_errors_re <= 1'd0;
	if ((vns_csrbank0_sel & (vns_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		vns_csrbank0_bus_errors_re <= vns_interface0_bank_bus_we;
		vns_csrbank0_bus_errors_we <= (~vns_interface0_bank_bus_we);
	end
end
always @(*) begin
	soc_soc_rst <= 1'd0;
	if (soc_reset_re) begin
		soc_soc_rst <= soc_reset_storage[0];
	end
end
assign soc_cpu_rst = soc_reset_storage[1];
assign vns_csrbank0_reset0_w = soc_reset_storage[1:0];
assign vns_csrbank0_scratch0_w = soc_scratch_storage[31:0];
assign vns_csrbank0_bus_errors_w = soc_bus_errors_status[31:0];
assign soc_bus_errors_we = vns_csrbank0_bus_errors_we;
assign vns_csrbank1_sel = (vns_interface1_bank_bus_adr[13:9] == 2'd2);
assign vns_csrbank1_out0_r = vns_interface1_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank1_out0_re <= 1'd0;
	vns_csrbank1_out0_we <= 1'd0;
	if ((vns_csrbank1_sel & (vns_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		vns_csrbank1_out0_re <= vns_interface1_bank_bus_we;
		vns_csrbank1_out0_we <= (~vns_interface1_bank_bus_we);
	end
end
assign vns_csrbank1_out0_w = soc_storage;
assign vns_csrbank2_sel = (vns_interface2_bank_bus_adr[13:9] == 1'd0);
assign vns_csrbank2_mmap_dummy_bits0_r = vns_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	vns_csrbank2_mmap_dummy_bits0_we <= 1'd0;
	vns_csrbank2_mmap_dummy_bits0_re <= 1'd0;
	if ((vns_csrbank2_sel & (vns_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		vns_csrbank2_mmap_dummy_bits0_re <= vns_interface2_bank_bus_we;
		vns_csrbank2_mmap_dummy_bits0_we <= (~vns_interface2_bank_bus_we);
	end
end
assign vns_csrbank2_master_cs0_r = vns_interface2_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank2_master_cs0_we <= 1'd0;
	vns_csrbank2_master_cs0_re <= 1'd0;
	if ((vns_csrbank2_sel & (vns_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		vns_csrbank2_master_cs0_re <= vns_interface2_bank_bus_we;
		vns_csrbank2_master_cs0_we <= (~vns_interface2_bank_bus_we);
	end
end
assign vns_csrbank2_master_phyconfig0_r = vns_interface2_bank_bus_dat_w[23:0];
always @(*) begin
	vns_csrbank2_master_phyconfig0_re <= 1'd0;
	vns_csrbank2_master_phyconfig0_we <= 1'd0;
	if ((vns_csrbank2_sel & (vns_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		vns_csrbank2_master_phyconfig0_re <= vns_interface2_bank_bus_we;
		vns_csrbank2_master_phyconfig0_we <= (~vns_interface2_bank_bus_we);
	end
end
assign soc_master_rxtx_r = vns_interface2_bank_bus_dat_w[31:0];
always @(*) begin
	soc_master_rxtx_we <= 1'd0;
	soc_master_rxtx_re <= 1'd0;
	if ((vns_csrbank2_sel & (vns_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		soc_master_rxtx_re <= vns_interface2_bank_bus_we;
		soc_master_rxtx_we <= (~vns_interface2_bank_bus_we);
	end
end
assign vns_csrbank2_master_status_r = vns_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	vns_csrbank2_master_status_we <= 1'd0;
	vns_csrbank2_master_status_re <= 1'd0;
	if ((vns_csrbank2_sel & (vns_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		vns_csrbank2_master_status_re <= vns_interface2_bank_bus_we;
		vns_csrbank2_master_status_we <= (~vns_interface2_bank_bus_we);
	end
end
assign vns_csrbank2_mmap_dummy_bits0_w = soc_litespimmap_storage[7:0];
assign vns_csrbank2_master_cs0_w = soc_master_cs_storage;
assign soc_master_len = soc_master_phyconfig_storage[7:0];
assign soc_master_width = soc_master_phyconfig_storage[11:8];
assign soc_master_mask = soc_master_phyconfig_storage[23:16];
assign vns_csrbank2_master_phyconfig0_w = soc_master_phyconfig_storage[23:0];
always @(*) begin
	soc_master_status_status <= 2'd0;
	soc_master_status_status[0] <= soc_master_tx_ready;
	soc_master_status_status[1] <= soc_master_rx_ready;
end
assign vns_csrbank2_master_status_w = soc_master_status_status[1:0];
assign soc_master_status_we = vns_csrbank2_master_status_we;
assign vns_csrbank3_sel = (vns_interface3_bank_bus_adr[13:9] == 3'd4);
assign vns_csrbank3_load0_r = vns_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	vns_csrbank3_load0_re <= 1'd0;
	vns_csrbank3_load0_we <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 1'd0))) begin
		vns_csrbank3_load0_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_load0_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_reload0_r = vns_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	vns_csrbank3_reload0_we <= 1'd0;
	vns_csrbank3_reload0_re <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 1'd1))) begin
		vns_csrbank3_reload0_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_reload0_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_en0_r = vns_interface3_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank3_en0_we <= 1'd0;
	vns_csrbank3_en0_re <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 2'd2))) begin
		vns_csrbank3_en0_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_en0_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_update_value0_r = vns_interface3_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank3_update_value0_re <= 1'd0;
	vns_csrbank3_update_value0_we <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 2'd3))) begin
		vns_csrbank3_update_value0_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_update_value0_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_value_r = vns_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	vns_csrbank3_value_we <= 1'd0;
	vns_csrbank3_value_re <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 3'd4))) begin
		vns_csrbank3_value_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_value_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_ev_status_r = vns_interface3_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank3_ev_status_we <= 1'd0;
	vns_csrbank3_ev_status_re <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 3'd5))) begin
		vns_csrbank3_ev_status_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_ev_status_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_ev_pending_r = vns_interface3_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank3_ev_pending_re <= 1'd0;
	vns_csrbank3_ev_pending_we <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 3'd6))) begin
		vns_csrbank3_ev_pending_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_ev_pending_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_ev_enable0_r = vns_interface3_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank3_ev_enable0_we <= 1'd0;
	vns_csrbank3_ev_enable0_re <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 3'd7))) begin
		vns_csrbank3_ev_enable0_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_ev_enable0_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_uptime_latch0_r = vns_interface3_bank_bus_dat_w[0];
always @(*) begin
	vns_csrbank3_uptime_latch0_we <= 1'd0;
	vns_csrbank3_uptime_latch0_re <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 4'd8))) begin
		vns_csrbank3_uptime_latch0_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_uptime_latch0_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_uptime_cycles1_r = vns_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	vns_csrbank3_uptime_cycles1_re <= 1'd0;
	vns_csrbank3_uptime_cycles1_we <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 4'd9))) begin
		vns_csrbank3_uptime_cycles1_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_uptime_cycles1_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_uptime_cycles0_r = vns_interface3_bank_bus_dat_w[31:0];
always @(*) begin
	vns_csrbank3_uptime_cycles0_we <= 1'd0;
	vns_csrbank3_uptime_cycles0_re <= 1'd0;
	if ((vns_csrbank3_sel & (vns_interface3_bank_bus_adr[8:0] == 4'd10))) begin
		vns_csrbank3_uptime_cycles0_re <= vns_interface3_bank_bus_we;
		vns_csrbank3_uptime_cycles0_we <= (~vns_interface3_bank_bus_we);
	end
end
assign vns_csrbank3_load0_w = soc_load_storage[31:0];
assign vns_csrbank3_reload0_w = soc_reload_storage[31:0];
assign vns_csrbank3_en0_w = soc_en_storage;
assign vns_csrbank3_update_value0_w = soc_update_value_storage;
assign vns_csrbank3_value_w = soc_value_status[31:0];
assign soc_value_we = vns_csrbank3_value_we;
assign soc_status_status = soc_zero0;
assign vns_csrbank3_ev_status_w = soc_status_status;
assign soc_status_we = vns_csrbank3_ev_status_we;
assign soc_pending_status = soc_zero1;
assign vns_csrbank3_ev_pending_w = soc_pending_status;
assign soc_pending_we = vns_csrbank3_ev_pending_we;
assign soc_zero2 = soc_enable_storage;
assign vns_csrbank3_ev_enable0_w = soc_enable_storage;
assign vns_csrbank3_uptime_latch0_w = soc_uptime_latch_storage;
assign vns_csrbank3_uptime_cycles1_w = soc_uptime_cycles_status[63:32];
assign vns_csrbank3_uptime_cycles0_w = soc_uptime_cycles_status[31:0];
assign soc_uptime_cycles_we = vns_csrbank3_uptime_cycles0_we;
assign vns_csr_interconnect_adr = vns_hpssoc_adr;
assign vns_csr_interconnect_we = vns_hpssoc_we;
assign vns_csr_interconnect_dat_w = vns_hpssoc_dat_w;
assign vns_hpssoc_dat_r = vns_csr_interconnect_dat_r;
assign vns_interface0_bank_bus_adr = vns_csr_interconnect_adr;
assign vns_interface1_bank_bus_adr = vns_csr_interconnect_adr;
assign vns_interface2_bank_bus_adr = vns_csr_interconnect_adr;
assign vns_interface3_bank_bus_adr = vns_csr_interconnect_adr;
assign vns_interface0_bank_bus_we = vns_csr_interconnect_we;
assign vns_interface1_bank_bus_we = vns_csr_interconnect_we;
assign vns_interface2_bank_bus_we = vns_csr_interconnect_we;
assign vns_interface3_bank_bus_we = vns_csr_interconnect_we;
assign vns_interface0_bank_bus_dat_w = vns_csr_interconnect_dat_w;
assign vns_interface1_bank_bus_dat_w = vns_csr_interconnect_dat_w;
assign vns_interface2_bank_bus_dat_w = vns_csr_interconnect_dat_w;
assign vns_interface3_bank_bus_dat_w = vns_csr_interconnect_dat_w;
assign vns_csr_interconnect_dat_r = (((vns_interface0_bank_bus_dat_r | vns_interface1_bank_bus_dat_r) | vns_interface2_bank_bus_dat_r) | vns_interface3_bank_bus_dat_r);
always @(*) begin
	vns_array_muxed0 <= 30'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed0 <= soc_ibus_adr;
		end
		default: begin
			vns_array_muxed0 <= soc_dbus_adr;
		end
	endcase
end
always @(*) begin
	vns_array_muxed1 <= 32'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed1 <= soc_ibus_dat_w;
		end
		default: begin
			vns_array_muxed1 <= soc_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	vns_array_muxed2 <= 4'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed2 <= soc_ibus_sel;
		end
		default: begin
			vns_array_muxed2 <= soc_dbus_sel;
		end
	endcase
end
always @(*) begin
	vns_array_muxed3 <= 1'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed3 <= soc_ibus_cyc;
		end
		default: begin
			vns_array_muxed3 <= soc_dbus_cyc;
		end
	endcase
end
always @(*) begin
	vns_array_muxed4 <= 1'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed4 <= soc_ibus_stb;
		end
		default: begin
			vns_array_muxed4 <= soc_dbus_stb;
		end
	endcase
end
always @(*) begin
	vns_array_muxed5 <= 1'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed5 <= soc_ibus_we;
		end
		default: begin
			vns_array_muxed5 <= soc_dbus_we;
		end
	endcase
end
always @(*) begin
	vns_array_muxed6 <= 3'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed6 <= soc_ibus_cti;
		end
		default: begin
			vns_array_muxed6 <= soc_dbus_cti;
		end
	endcase
end
always @(*) begin
	vns_array_muxed7 <= 2'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed7 <= soc_ibus_bte;
		end
		default: begin
			vns_array_muxed7 <= soc_dbus_bte;
		end
	endcase
end

always @(posedge por_clk) begin
	if ((soc_por_counter != 1'd0)) begin
		soc_por_counter <= (soc_por_counter - 1'd1);
	end
	if (por_rst) begin
		soc_por_counter <= 12'd4095;
	end
end

always @(posedge sys_clk) begin
	if ((soc_bus_errors != 32'd4294967295)) begin
		if (soc_bus_error) begin
			soc_bus_errors <= (soc_bus_errors + 1'd1);
		end
	end
	soc_bus_ack <= ((soc_bus_stb & soc_bus_cyc) & (~soc_bus_ack));
	if (soc_litespiddrphycore_sr_out_load) begin
		soc_litespiddrphycore_sr_out <= (soc_litespiddrphycore_sink_payload_data <<< (6'd32 - soc_litespiddrphycore_sink_payload_len));
	end
	if (soc_litespiddrphycore_sr_out_shift) begin
		soc_litespiddrphycore4 <= soc_litespiddrphycore5;
		soc_litespiddrphycore0 <= soc_litespiddrphycore1;
		case (soc_litespiddrphycore_sink_payload_width)
			1'd1: begin
				soc_litespiddrphycore_sr_out <= {soc_litespiddrphycore_sr_out, soc_litespiddrphycore6};
			end
			2'd2: begin
				soc_litespiddrphycore_sr_out <= {soc_litespiddrphycore_sr_out, soc_litespiddrphycore7};
			end
			3'd4: begin
				soc_litespiddrphycore_sr_out <= {soc_litespiddrphycore_sr_out, soc_litespiddrphycore8};
			end
			4'd8: begin
				soc_litespiddrphycore_sr_out <= {soc_litespiddrphycore_sr_out, soc_litespiddrphycore9};
			end
		endcase
	end
	if (soc_litespiddrphycore_sr_in_shift) begin
		case (soc_litespiddrphycore_sink_payload_width)
			1'd1: begin
				soc_litespiddrphycore_sr_in <= {soc_litespiddrphycore_sr_in, soc_litespiddrphycore2[1]};
			end
			2'd2: begin
				soc_litespiddrphycore_sr_in <= {soc_litespiddrphycore_sr_in, soc_litespiddrphycore2[1:0]};
			end
			3'd4: begin
				soc_litespiddrphycore_sr_in <= {soc_litespiddrphycore_sr_in, soc_litespiddrphycore2[3:0]};
			end
			4'd8: begin
				soc_litespiddrphycore_sr_in <= {soc_litespiddrphycore_sr_in, soc_litespiddrphycore2[3:0]};
			end
		endcase
	end
	if (soc_litespiddrphycore_wait) begin
		if ((~soc_litespiddrphycore_done)) begin
			soc_litespiddrphycore_count <= (soc_litespiddrphycore_count - 1'd1);
		end
	end else begin
		soc_litespiddrphycore_count <= 4'd11;
	end
	vns_litespiphy_state <= vns_litespiphy_next_state;
	if (soc_litespiddrphycore_en_litespiphy_next_value_ce0) begin
		soc_litespiddrphycore_en <= soc_litespiddrphycore_en_litespiphy_next_value0;
	end
	if (soc_litespiddrphycore_sr_cnt_litespiphy_next_value_ce1) begin
		soc_litespiddrphycore_sr_cnt <= soc_litespiddrphycore_sr_cnt_litespiphy_next_value1;
	end
	case (vns_litespi_grant)
		1'd0: begin
			if ((~vns_litespi_request[0])) begin
				if (vns_litespi_request[1]) begin
					vns_litespi_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~vns_litespi_request[1])) begin
				if (vns_litespi_request[0]) begin
					vns_litespi_grant <= 1'd0;
				end
			end
		end
	endcase
	if (soc_litespimmap_wait) begin
		if ((~soc_litespimmap_done)) begin
			soc_litespimmap_count <= (soc_litespimmap_count - 1'd1);
		end
	end else begin
		soc_litespimmap_count <= 9'd256;
	end
	vns_litespi_state <= vns_litespi_next_state;
	if (soc_litespimmap_burst_cs_litespi_next_value_ce0) begin
		soc_litespimmap_burst_cs <= soc_litespimmap_burst_cs_litespi_next_value0;
	end
	if (soc_litespimmap_burst_adr_litespi_next_value_ce1) begin
		soc_litespimmap_burst_adr <= soc_litespimmap_burst_adr_litespi_next_value1;
	end
	if (((~soc_master_tx_fifo_source_valid) | soc_master_tx_fifo_source_ready)) begin
		soc_master_tx_fifo_source_valid <= soc_master_tx_fifo_sink_valid;
		soc_master_tx_fifo_source_first <= soc_master_tx_fifo_sink_first;
		soc_master_tx_fifo_source_last <= soc_master_tx_fifo_sink_last;
		soc_master_tx_fifo_source_payload_data <= soc_master_tx_fifo_sink_payload_data;
		soc_master_tx_fifo_source_payload_len <= soc_master_tx_fifo_sink_payload_len;
		soc_master_tx_fifo_source_payload_width <= soc_master_tx_fifo_sink_payload_width;
		soc_master_tx_fifo_source_payload_mask <= soc_master_tx_fifo_sink_payload_mask;
	end
	if (((~soc_master_rx_fifo_source_valid) | soc_master_rx_fifo_source_ready)) begin
		soc_master_rx_fifo_source_valid <= soc_master_rx_fifo_sink_valid;
		soc_master_rx_fifo_source_first <= soc_master_rx_fifo_sink_first;
		soc_master_rx_fifo_source_last <= soc_master_rx_fifo_sink_last;
		soc_master_rx_fifo_source_payload_data <= soc_master_rx_fifo_sink_payload_data;
	end
	if (soc_done) begin
		soc_chaser <= {soc_chaser, (~soc_chaser)};
	end
	if (soc_re) begin
		soc_mode <= 1'd1;
	end
	if (soc_wait) begin
		if ((~soc_done)) begin
			soc_count <= (soc_count - 1'd1);
		end
	end else begin
		soc_count <= 25'd32142857;
	end
	if (soc_en_storage) begin
		if ((soc_value == 1'd0)) begin
			soc_value <= soc_reload_storage;
		end else begin
			soc_value <= (soc_value - 1'd1);
		end
	end else begin
		soc_value <= soc_load_storage;
	end
	if (soc_update_value_re) begin
		soc_value_status <= soc_value;
	end
	soc_uptime_cycles <= (soc_uptime_cycles + 1'd1);
	if (soc_uptime_latch_re) begin
		soc_uptime_cycles_status <= soc_uptime_cycles;
	end
	if (soc_zero_clear) begin
		soc_zero_pending <= 1'd0;
	end
	soc_zero_trigger_d <= soc_zero_trigger;
	if ((soc_zero_trigger & (~soc_zero_trigger_d))) begin
		soc_zero_pending <= 1'd1;
	end
	vns_state <= vns_next_state;
	case (vns_grant)
		1'd0: begin
			if ((~vns_request[0])) begin
				if (vns_request[1]) begin
					vns_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~vns_request[1])) begin
				if (vns_request[0]) begin
					vns_grant <= 1'd0;
				end
			end
		end
	endcase
	vns_slave_sel_r <= vns_slave_sel;
	if (vns_wait) begin
		if ((~vns_done)) begin
			vns_count <= (vns_count - 1'd1);
		end
	end else begin
		vns_count <= 20'd1000000;
	end
	vns_interface0_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank0_sel) begin
		case (vns_interface0_bank_bus_adr[8:0])
			1'd0: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_reset0_w;
			end
			1'd1: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_scratch0_w;
			end
			2'd2: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (vns_csrbank0_reset0_re) begin
		soc_reset_storage[1:0] <= vns_csrbank0_reset0_r;
	end
	soc_reset_re <= vns_csrbank0_reset0_re;
	if (vns_csrbank0_scratch0_re) begin
		soc_scratch_storage[31:0] <= vns_csrbank0_scratch0_r;
	end
	soc_scratch_re <= vns_csrbank0_scratch0_re;
	soc_bus_errors_re <= vns_csrbank0_bus_errors_re;
	vns_interface1_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank1_sel) begin
		case (vns_interface1_bank_bus_adr[8:0])
			1'd0: begin
				vns_interface1_bank_bus_dat_r <= vns_csrbank1_out0_w;
			end
		endcase
	end
	if (vns_csrbank1_out0_re) begin
		soc_storage <= vns_csrbank1_out0_r;
	end
	soc_re <= vns_csrbank1_out0_re;
	vns_interface2_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank2_sel) begin
		case (vns_interface2_bank_bus_adr[8:0])
			1'd0: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_mmap_dummy_bits0_w;
			end
			1'd1: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_master_cs0_w;
			end
			2'd2: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_master_phyconfig0_w;
			end
			2'd3: begin
				vns_interface2_bank_bus_dat_r <= soc_master_rxtx_w;
			end
			3'd4: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_master_status_w;
			end
		endcase
	end
	if (vns_csrbank2_mmap_dummy_bits0_re) begin
		soc_litespimmap_storage[7:0] <= vns_csrbank2_mmap_dummy_bits0_r;
	end
	soc_litespimmap_re <= vns_csrbank2_mmap_dummy_bits0_re;
	if (vns_csrbank2_master_cs0_re) begin
		soc_master_cs_storage <= vns_csrbank2_master_cs0_r;
	end
	soc_master_cs_re <= vns_csrbank2_master_cs0_re;
	if (vns_csrbank2_master_phyconfig0_re) begin
		soc_master_phyconfig_storage[23:0] <= vns_csrbank2_master_phyconfig0_r;
	end
	soc_master_phyconfig_re <= vns_csrbank2_master_phyconfig0_re;
	soc_master_status_re <= vns_csrbank2_master_status_re;
	vns_interface3_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank3_sel) begin
		case (vns_interface3_bank_bus_adr[8:0])
			1'd0: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_load0_w;
			end
			1'd1: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_reload0_w;
			end
			2'd2: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_en0_w;
			end
			2'd3: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_update_value0_w;
			end
			3'd4: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_value_w;
			end
			3'd5: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_ev_status_w;
			end
			3'd6: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_ev_pending_w;
			end
			3'd7: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_ev_enable0_w;
			end
			4'd8: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_uptime_latch0_w;
			end
			4'd9: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_uptime_cycles1_w;
			end
			4'd10: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_uptime_cycles0_w;
			end
		endcase
	end
	if (vns_csrbank3_load0_re) begin
		soc_load_storage[31:0] <= vns_csrbank3_load0_r;
	end
	soc_load_re <= vns_csrbank3_load0_re;
	if (vns_csrbank3_reload0_re) begin
		soc_reload_storage[31:0] <= vns_csrbank3_reload0_r;
	end
	soc_reload_re <= vns_csrbank3_reload0_re;
	if (vns_csrbank3_en0_re) begin
		soc_en_storage <= vns_csrbank3_en0_r;
	end
	soc_en_re <= vns_csrbank3_en0_re;
	if (vns_csrbank3_update_value0_re) begin
		soc_update_value_storage <= vns_csrbank3_update_value0_r;
	end
	soc_update_value_re <= vns_csrbank3_update_value0_re;
	soc_value_re <= vns_csrbank3_value_re;
	soc_status_re <= vns_csrbank3_ev_status_re;
	if (vns_csrbank3_ev_pending_re) begin
		soc_pending_r <= vns_csrbank3_ev_pending_r;
	end
	soc_pending_re <= vns_csrbank3_ev_pending_re;
	if (vns_csrbank3_ev_enable0_re) begin
		soc_enable_storage <= vns_csrbank3_ev_enable0_r;
	end
	soc_enable_re <= vns_csrbank3_ev_enable0_re;
	if (vns_csrbank3_uptime_latch0_re) begin
		soc_uptime_latch_storage <= vns_csrbank3_uptime_latch0_r;
	end
	soc_uptime_latch_re <= vns_csrbank3_uptime_latch0_re;
	soc_uptime_cycles_re <= vns_csrbank3_uptime_cycles0_re;
	if (sys_rst) begin
		soc_reset_storage <= 2'd0;
		soc_reset_re <= 1'd0;
		soc_scratch_storage <= 32'd305419896;
		soc_scratch_re <= 1'd0;
		soc_bus_errors_re <= 1'd0;
		soc_bus_errors <= 32'd0;
		soc_bus_ack <= 1'd0;
		soc_litespiddrphycore_en <= 1'd0;
		soc_litespiddrphycore_count <= 4'd11;
		soc_litespiddrphycore0 <= 4'd0;
		soc_litespiddrphycore4 <= 4'd0;
		soc_litespimmap_burst_cs <= 1'd0;
		soc_litespimmap_count <= 9'd256;
		soc_litespimmap_storage <= 8'd8;
		soc_litespimmap_re <= 1'd0;
		soc_master_cs_storage <= 1'd0;
		soc_master_cs_re <= 1'd0;
		soc_master_phyconfig_storage <= 24'd0;
		soc_master_phyconfig_re <= 1'd0;
		soc_master_status_re <= 1'd0;
		soc_master_tx_fifo_source_valid <= 1'd0;
		soc_master_tx_fifo_source_payload_data <= 32'd0;
		soc_master_tx_fifo_source_payload_len <= 6'd0;
		soc_master_tx_fifo_source_payload_width <= 4'd0;
		soc_master_tx_fifo_source_payload_mask <= 8'd0;
		soc_master_rx_fifo_source_valid <= 1'd0;
		soc_master_rx_fifo_source_payload_data <= 32'd0;
		soc_storage <= 1'd0;
		soc_re <= 1'd0;
		soc_chaser <= 1'd0;
		soc_mode <= 1'd0;
		soc_count <= 25'd32142857;
		soc_load_storage <= 32'd0;
		soc_load_re <= 1'd0;
		soc_reload_storage <= 32'd0;
		soc_reload_re <= 1'd0;
		soc_en_storage <= 1'd0;
		soc_en_re <= 1'd0;
		soc_update_value_storage <= 1'd0;
		soc_update_value_re <= 1'd0;
		soc_value_status <= 32'd0;
		soc_value_re <= 1'd0;
		soc_zero_pending <= 1'd0;
		soc_zero_trigger_d <= 1'd0;
		soc_status_re <= 1'd0;
		soc_pending_re <= 1'd0;
		soc_pending_r <= 1'd0;
		soc_enable_storage <= 1'd0;
		soc_enable_re <= 1'd0;
		soc_value <= 32'd0;
		soc_uptime_latch_storage <= 1'd0;
		soc_uptime_latch_re <= 1'd0;
		soc_uptime_cycles_status <= 64'd0;
		soc_uptime_cycles_re <= 1'd0;
		vns_litespiphy_state <= 2'd0;
		vns_litespi_grant <= 1'd0;
		vns_litespi_state <= 4'd0;
		vns_grant <= 1'd0;
		vns_slave_sel_r <= 3'd0;
		vns_count <= 20'd1000000;
		vns_state <= 1'd0;
	end
end

Cfu Cfu(
	.clk(sys_clk),
	.cmd_payload_function_id(soc_vexriscv_cfu_bus_cmd_payload_function_id),
	.cmd_payload_inputs_0(soc_vexriscv_cfu_bus_cmd_payload_inputs_0),
	.cmd_payload_inputs_1(soc_vexriscv_cfu_bus_cmd_payload_inputs_1),
	.cmd_valid(soc_vexriscv_cfu_bus_cmd_valid),
	.reset(sys_rst),
	.rsp_ready(soc_vexriscv_cfu_bus_rsp_ready),
	.cmd_ready(soc_vexriscv_cfu_bus_cmd_ready),
	.rsp_payload_outputs_0(soc_vexriscv_cfu_bus_rsp_payload_outputs_0),
	.rsp_valid(soc_vexriscv_cfu_bus_rsp_valid)
);

SP512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) SP512K (
	.AD(soc_bus_adr[13:0]),
	.BYTEEN_N((~soc_bus_sel[3:0])),
	.CE(1'd1),
	.CEOUT(1'd0),
	.CLK(sys_clk),
	.CS(soc_cs0),
	.DI(soc_datain0),
	.RSTOUT(1'd0),
	.WE(soc_wren0),
	.DO(soc_dataout0)
);

SP512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) SP512K_1 (
	.AD(soc_bus_adr[13:0]),
	.BYTEEN_N((~soc_bus_sel[3:0])),
	.CE(1'd1),
	.CEOUT(1'd0),
	.CLK(sys_clk),
	.CS(soc_cs1),
	.DI(soc_datain1),
	.RSTOUT(1'd0),
	.WE(soc_wren1),
	.DO(soc_dataout1)
);

SP512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) SP512K_2 (
	.AD(soc_bus_adr[13:0]),
	.BYTEEN_N((~soc_bus_sel[3:0])),
	.CE(1'd1),
	.CEOUT(1'd0),
	.CLK(sys_clk),
	.CS(soc_cs2),
	.DI(soc_datain2),
	.RSTOUT(1'd0),
	.WE(soc_wren2),
	.DO(soc_dataout2)
);

SP512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) SP512K_3 (
	.AD(soc_bus_adr[13:0]),
	.BYTEEN_N((~soc_bus_sel[3:0])),
	.CE(1'd1),
	.CEOUT(1'd0),
	.CLK(sys_clk),
	.CS(soc_cs3),
	.DI(soc_datain3),
	.RSTOUT(1'd0),
	.WE(soc_wren3),
	.DO(soc_dataout3)
);

SP512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) SP512K_4 (
	.AD(soc_bus_adr[13:0]),
	.BYTEEN_N((~soc_bus_sel[3:0])),
	.CE(1'd1),
	.CEOUT(1'd0),
	.CLK(sys_clk),
	.CS(soc_cs4),
	.DI(soc_datain4),
	.RSTOUT(1'd0),
	.WE(soc_wren4),
	.DO(soc_dataout4)
);

OSCA #(
	.HF_CLK_DIV("6"),
	.HF_OSC_EN("ENABLED")
) OSCA (
	.HFOUTEN(1'd1),
	.HFCLKOUT(soc_clkout)
);

VexRiscv VexRiscv(
	.CfuPlugin_bus_cmd_ready(soc_vexriscv_cfu_bus_cmd_ready),
	.CfuPlugin_bus_rsp_payload_outputs_0(soc_vexriscv_cfu_bus_rsp_payload_outputs_0),
	.CfuPlugin_bus_rsp_valid(soc_vexriscv_cfu_bus_rsp_valid),
	.clk(sys_clk),
	.dBusWishbone_ACK(soc_dbus_ack),
	.dBusWishbone_DAT_MISO(soc_dbus_dat_r),
	.dBusWishbone_ERR(soc_dbus_err),
	// .externalInterruptArray(soc_interrupt),
	.externalResetVector(soc_vexriscv),
	.iBusWishbone_ACK(soc_ibus_ack),
	.iBusWishbone_DAT_MISO(soc_ibus_dat_r),
	.iBusWishbone_ERR(soc_ibus_err),
	.reset((sys_rst | soc_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.CfuPlugin_bus_cmd_payload_function_id(soc_vexriscv_cfu_bus_cmd_payload_function_id),
	.CfuPlugin_bus_cmd_payload_inputs_0(soc_vexriscv_cfu_bus_cmd_payload_inputs_0),
	.CfuPlugin_bus_cmd_payload_inputs_1(soc_vexriscv_cfu_bus_cmd_payload_inputs_1),
	.CfuPlugin_bus_cmd_valid(soc_vexriscv_cfu_bus_cmd_valid),
	.CfuPlugin_bus_rsp_ready(soc_vexriscv_cfu_bus_rsp_ready),
	.dBusWishbone_ADR(soc_dbus_adr),
	.dBusWishbone_BTE(soc_dbus_bte),
	.dBusWishbone_CTI(soc_dbus_cti),
	.dBusWishbone_CYC(soc_dbus_cyc),
	.dBusWishbone_DAT_MOSI(soc_dbus_dat_w),
	.dBusWishbone_SEL(soc_dbus_sel),
	.dBusWishbone_STB(soc_dbus_stb),
	.dBusWishbone_WE(soc_dbus_we),
	.iBusWishbone_ADR(soc_ibus_adr),
	.iBusWishbone_BTE(soc_ibus_bte),
	.iBusWishbone_CTI(soc_ibus_cti),
	.iBusWishbone_CYC(soc_ibus_cyc),
	.iBusWishbone_DAT_MOSI(soc_ibus_dat_w),
	.iBusWishbone_SEL(soc_ibus_sel),
	.iBusWishbone_STB(soc_ibus_stb),
	.iBusWishbone_WE(soc_ibus_we)
);

FD1P3BX FD1P3BX(
	.CK(sys_clk),
	.D(1'd0),
	.PD((soc_por_counter != 1'd0)),
	.SP(1'd1),
	.Q(vns_rst1)
);

FD1P3BX FD1P3BX_1(
	.CK(sys_clk),
	.D(vns_rst1),
	.PD((soc_por_counter != 1'd0)),
	.SP(1'd1),
	.Q(sys_rst)
);

ODDRX1 ODDRX1(
	.D0(soc_litespiddrphycore_en),
	.D1(1'd0),
	.SCLK(sys_clk),
	.Q(spiflash4x_clk)
);

assign spiflash4x_dq[0] = vns_latticenxddrtristateimpl0_oe ? vns_latticenxddrtristateimpl0__o : 1'bz;
assign vns_latticenxddrtristateimpl0__i = spiflash4x_dq[0];

assign spiflash4x_dq[1] = vns_latticenxddrtristateimpl1_oe ? vns_latticenxddrtristateimpl1__o : 1'bz;
assign vns_latticenxddrtristateimpl1__i = spiflash4x_dq[1];

assign spiflash4x_dq[2] = vns_latticenxddrtristateimpl2_oe ? vns_latticenxddrtristateimpl2__o : 1'bz;
assign vns_latticenxddrtristateimpl2__i = spiflash4x_dq[2];

assign spiflash4x_dq[3] = vns_latticenxddrtristateimpl3_oe ? vns_latticenxddrtristateimpl3__o : 1'bz;
assign vns_latticenxddrtristateimpl3__i = spiflash4x_dq[3];

ODDRX1 ODDRX1_1(
	.D0(soc_litespiddrphycore0[0]),
	.D1(soc_litespiddrphycore1[0]),
	.SCLK(sys_clk),
	.Q(vns_latticenxddrtristateimpl0__o)
);

FD1P3BX FD1P3BX_2(
	.CK(sys_clk),
	.D((soc_litespiddrphycore4[0] | soc_litespiddrphycore5[0])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(vns_latticenxddrtristateimpl0_oe)
);

IDDRX1 IDDRX1(
	.D(vns_latticenxddrtristateimpl0__i),
	.SCLK(sys_clk),
	.Q0(soc_litespiddrphycore2[0]),
	.Q1(soc_litespiddrphycore3[0])
);

ODDRX1 ODDRX1_2(
	.D0(soc_litespiddrphycore0[1]),
	.D1(soc_litespiddrphycore1[1]),
	.SCLK(sys_clk),
	.Q(vns_latticenxddrtristateimpl1__o)
);

FD1P3BX FD1P3BX_3(
	.CK(sys_clk),
	.D((soc_litespiddrphycore4[1] | soc_litespiddrphycore5[1])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(vns_latticenxddrtristateimpl1_oe)
);

IDDRX1 IDDRX1_1(
	.D(vns_latticenxddrtristateimpl1__i),
	.SCLK(sys_clk),
	.Q0(soc_litespiddrphycore2[1]),
	.Q1(soc_litespiddrphycore3[1])
);

ODDRX1 ODDRX1_3(
	.D0(soc_litespiddrphycore0[2]),
	.D1(soc_litespiddrphycore1[2]),
	.SCLK(sys_clk),
	.Q(vns_latticenxddrtristateimpl2__o)
);

FD1P3BX FD1P3BX_4(
	.CK(sys_clk),
	.D((soc_litespiddrphycore4[2] | soc_litespiddrphycore5[2])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(vns_latticenxddrtristateimpl2_oe)
);

IDDRX1 IDDRX1_2(
	.D(vns_latticenxddrtristateimpl2__i),
	.SCLK(sys_clk),
	.Q0(soc_litespiddrphycore2[2]),
	.Q1(soc_litespiddrphycore3[2])
);

ODDRX1 ODDRX1_4(
	.D0(soc_litespiddrphycore0[3]),
	.D1(soc_litespiddrphycore1[3]),
	.SCLK(sys_clk),
	.Q(vns_latticenxddrtristateimpl3__o)
);

FD1P3BX FD1P3BX_5(
	.CK(sys_clk),
	.D((soc_litespiddrphycore4[3] | soc_litespiddrphycore5[3])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(vns_latticenxddrtristateimpl3_oe)
);

IDDRX1 IDDRX1_3(
	.D(vns_latticenxddrtristateimpl3__i),
	.SCLK(sys_clk),
	.Q0(soc_litespiddrphycore2[3]),
	.Q1(soc_litespiddrphycore3[3])
);

endmodule
