// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : hps_proto2_platform.v
// Device     : LIFCL-17-8UWG72C
// LiteX sha1 : 6b3eda16
// Date       : 2022-02-02 07:36:49
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module top (
	output wire spiflash4x_cs_n,
	output wire spiflash4x_clk,
	inout  wire [3:0] spiflash4x_dq,
	input  wire serial_rx,
	output reg  serial_tx
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

(* keep = "true" *) wire sys_clk;
wire sys_rst;
wire por_clk;
reg  por_rst = 1'd0;
wire clkout;
reg  [11:0] por_counter = 12'd4095;
reg  soc_rst = 1'd0;
wire cpu_rst;
reg  [1:0] reset_storage = 2'd0;
reg  reset_re = 1'd0;
reg  [31:0] scratch_storage = 32'd305419896;
reg  scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg  bus_errors_re = 1'd0;
wire bus_error;
reg  [31:0] bus_errors = 32'd0;
wire reset;
reg  [31:0] interrupt = 32'd0;
wire [29:0] ibus_adr;
wire [31:0] ibus_dat_w;
wire [31:0] ibus_dat_r;
wire [3:0] ibus_sel;
wire ibus_cyc;
wire ibus_stb;
wire ibus_ack;
wire ibus_we;
wire [2:0] ibus_cti;
wire [1:0] ibus_bte;
wire ibus_err;
wire [29:0] dbus_adr;
wire [31:0] dbus_dat_w;
wire [31:0] dbus_dat_r;
wire [3:0] dbus_sel;
wire dbus_cyc;
wire dbus_stb;
wire dbus_ack;
wire dbus_we;
wire [2:0] dbus_cti;
wire [1:0] dbus_bte;
wire dbus_err;
wire vexriscv_cfu_bus_cmd_valid;
wire vexriscv_cfu_bus_cmd_ready;
wire [9:0] vexriscv_cfu_bus_cmd_payload_function_id;
wire [31:0] vexriscv_cfu_bus_cmd_payload_inputs_0;
wire [31:0] vexriscv_cfu_bus_cmd_payload_inputs_1;
wire vexriscv_cfu_bus_rsp_valid;
wire vexriscv_cfu_bus_rsp_ready;
wire [31:0] vexriscv_cfu_bus_rsp_payload_outputs_0;
reg  [31:0] vexriscv = 32'd538968064;
wire [29:0] lram_bus_adr;
wire [31:0] lram_bus_dat_w;
wire [31:0] lram_bus_dat_r;
wire [3:0] lram_bus_sel;
wire lram_bus_cyc;
wire lram_bus_stb;
reg  lram_bus_ack = 1'd0;
wire lram_bus_we;
wire [2:0] lram_bus_cti;
wire [1:0] lram_bus_bte;
reg  lram_bus_err = 1'd0;
wire [31:0] lram_datain;
wire [31:0] lram_dataout;
wire lram_cs;
wire lram_wren;
wire [29:0] arena_bus_adr;
wire [31:0] arena_bus_dat_w;
reg  [31:0] arena_bus_dat_r = 32'd0;
wire [3:0] arena_bus_sel;
wire arena_bus_cyc;
wire arena_bus_stb;
reg  arena_bus_ack = 1'd0;
wire arena_bus_we;
wire [2:0] arena_bus_cti;
wire [1:0] arena_bus_bte;
reg  arena_bus_err = 1'd0;
wire [31:0] arena_datain0;
wire [31:0] arena_dataout0;
reg  arena_cs0 = 1'd0;
reg  arena_wren0 = 1'd0;
wire [13:0] arena_b_addr0;
wire [31:0] arena_b_dout0;
wire [31:0] arena_datain1;
wire [31:0] arena_dataout1;
reg  arena_cs1 = 1'd0;
reg  arena_wren1 = 1'd0;
wire [13:0] arena_b_addr1;
wire [31:0] arena_b_dout1;
wire [31:0] arena_datain2;
wire [31:0] arena_dataout2;
reg  arena_cs2 = 1'd0;
reg  arena_wren2 = 1'd0;
wire [13:0] arena_b_addr2;
wire [31:0] arena_b_dout2;
wire [31:0] arena_datain3;
wire [31:0] arena_dataout3;
reg  arena_cs3 = 1'd0;
reg  arena_wren3 = 1'd0;
wire [13:0] arena_b_addr3;
wire [31:0] arena_b_dout3;
reg  litespiddrphycore_source_valid = 1'd0;
wire litespiddrphycore_source_ready;
reg  litespiddrphycore_source_first = 1'd0;
reg  litespiddrphycore_source_last = 1'd0;
wire [31:0] litespiddrphycore_source_payload_data;
wire litespiddrphycore_sink_valid;
reg  litespiddrphycore_sink_ready = 1'd0;
wire litespiddrphycore_sink_first;
wire litespiddrphycore_sink_last;
wire [31:0] litespiddrphycore_sink_payload_data;
wire [5:0] litespiddrphycore_sink_payload_len;
wire [3:0] litespiddrphycore_sink_payload_width;
wire [7:0] litespiddrphycore_sink_payload_mask;
wire litespiddrphycore_cs;
reg  litespiddrphycore_en = 1'd0;
wire litespiddrphycore_wait;
wire litespiddrphycore_done;
reg  [3:0] litespiddrphycore_count = 4'd11;
wire litespiddrphycore_cs_enable;
reg  [3:0] litespiddrphycore0 = 4'd0;
reg  [3:0] litespiddrphycore1 = 4'd0;
wire [3:0] litespiddrphycore2;
wire [3:0] litespiddrphycore3;
reg  [3:0] litespiddrphycore4 = 4'd0;
wire [3:0] litespiddrphycore5;
reg  [7:0] litespiddrphycore_sr_cnt = 8'd0;
reg  litespiddrphycore_sr_out_load = 1'd0;
reg  litespiddrphycore_sr_out_shift = 1'd0;
reg  [31:0] litespiddrphycore_sr_out = 32'd0;
reg  litespiddrphycore_sr_in_shift = 1'd0;
reg  [31:0] litespiddrphycore_sr_in = 32'd0;
reg  litespiddrphycore6 = 1'd0;
reg  [1:0] litespiddrphycore7 = 2'd0;
reg  [3:0] litespiddrphycore8 = 4'd0;
reg  [7:0] litespiddrphycore9 = 8'd0;
wire crossbar_source_valid;
wire crossbar_source_ready;
wire crossbar_source_first;
wire crossbar_source_last;
wire [31:0] crossbar_source_payload_data;
wire [5:0] crossbar_source_payload_len;
wire [3:0] crossbar_source_payload_width;
wire [7:0] crossbar_source_payload_mask;
wire crossbar_sink_valid;
wire crossbar_sink_ready;
wire crossbar_sink_first;
wire crossbar_sink_last;
wire [31:0] crossbar_sink_payload_data;
reg  crossbar_cs = 1'd0;
reg  litespimmap_source_valid = 1'd0;
wire litespimmap_source_ready;
reg  litespimmap_source_first = 1'd0;
reg  litespimmap_source_last = 1'd0;
reg  [31:0] litespimmap_source_payload_data = 32'd0;
reg  [5:0] litespimmap_source_payload_len = 6'd0;
reg  [3:0] litespimmap_source_payload_width = 4'd0;
reg  [7:0] litespimmap_source_payload_mask = 8'd0;
wire litespimmap_sink_valid;
reg  litespimmap_sink_ready = 1'd0;
wire litespimmap_sink_first;
wire litespimmap_sink_last;
wire [31:0] litespimmap_sink_payload_data;
wire [29:0] litespimmap_bus_adr;
wire [31:0] litespimmap_bus_dat_w;
reg  [31:0] litespimmap_bus_dat_r = 32'd0;
wire [3:0] litespimmap_bus_sel;
wire litespimmap_bus_cyc;
wire litespimmap_bus_stb;
reg  litespimmap_bus_ack = 1'd0;
wire litespimmap_bus_we;
wire [2:0] litespimmap_bus_cti;
wire [1:0] litespimmap_bus_bte;
reg  litespimmap_bus_err = 1'd0;
reg  litespimmap_cs = 1'd0;
reg  litespimmap_burst_cs = 1'd0;
reg  [29:0] litespimmap_burst_adr = 30'd0;
reg  litespimmap_wait = 1'd0;
wire litespimmap_done;
reg  [8:0] litespimmap_count = 9'd256;
reg  [7:0] litespimmap_storage = 8'd8;
reg  litespimmap_re = 1'd0;
wire [7:0] litespimmap_spi_dummy_bits;
reg  [31:0] litespimmap_dummy = 32'd57005;
reg  [1:0] litespimmap = 2'd0;
wire port_mmap_user_port_source_valid;
wire port_mmap_user_port_source_ready;
wire port_mmap_user_port_source_first;
wire port_mmap_user_port_source_last;
wire [31:0] port_mmap_user_port_source_payload_data;
wire port_mmap_user_port_sink_valid;
wire port_mmap_user_port_sink_ready;
wire port_mmap_user_port_sink_first;
wire port_mmap_user_port_sink_last;
wire [31:0] port_mmap_user_port_sink_payload_data;
wire [5:0] port_mmap_user_port_sink_payload_len;
wire [3:0] port_mmap_user_port_sink_payload_width;
wire [7:0] port_mmap_user_port_sink_payload_mask;
wire port_mmap_internal_port_source_valid;
wire port_mmap_internal_port_source_ready;
wire port_mmap_internal_port_source_first;
wire port_mmap_internal_port_source_last;
wire [31:0] port_mmap_internal_port_source_payload_data;
wire port_mmap_internal_port_sink_valid;
wire port_mmap_internal_port_sink_ready;
wire port_mmap_internal_port_sink_first;
wire port_mmap_internal_port_sink_last;
wire [31:0] port_mmap_internal_port_sink_payload_data;
wire [5:0] port_mmap_internal_port_sink_payload_len;
wire [3:0] port_mmap_internal_port_sink_payload_width;
wire [7:0] port_mmap_internal_port_sink_payload_mask;
wire port_mmap_request;
wire master_sink_sink_valid;
wire master_sink_sink_ready;
wire master_sink_sink_first;
wire master_sink_sink_last;
wire [31:0] master_sink_sink_payload_data;
wire master_source_source_valid;
wire master_source_source_ready;
wire master_source_source_first;
wire master_source_source_last;
wire [31:0] master_source_source_payload_data;
wire [5:0] master_source_source_payload_len;
wire [3:0] master_source_source_payload_width;
wire [7:0] master_source_source_payload_mask;
wire master_cs;
reg  master_cs_storage = 1'd0;
reg  master_cs_re = 1'd0;
wire [7:0] master_len;
wire [3:0] master_width;
wire [7:0] master_mask;
reg  [23:0] master_phyconfig_storage = 24'd0;
reg  master_phyconfig_re = 1'd0;
reg  master_rxtx_re = 1'd0;
wire [31:0] master_rxtx_r;
reg  master_rxtx_we = 1'd0;
wire [31:0] master_rxtx_w;
wire master_tx_ready;
wire master_rx_ready;
reg  [1:0] master_status_status = 2'd0;
wire master_status_we;
reg  master_status_re = 1'd0;
wire master_tx_fifo_sink_valid;
wire master_tx_fifo_sink_ready;
reg  master_tx_fifo_sink_first = 1'd0;
wire master_tx_fifo_sink_last;
wire [31:0] master_tx_fifo_sink_payload_data;
wire [5:0] master_tx_fifo_sink_payload_len;
wire [3:0] master_tx_fifo_sink_payload_width;
wire [7:0] master_tx_fifo_sink_payload_mask;
reg  master_tx_fifo_source_valid = 1'd0;
wire master_tx_fifo_source_ready;
reg  master_tx_fifo_source_first = 1'd0;
reg  master_tx_fifo_source_last = 1'd0;
reg  [31:0] master_tx_fifo_source_payload_data = 32'd0;
reg  [5:0] master_tx_fifo_source_payload_len = 6'd0;
reg  [3:0] master_tx_fifo_source_payload_width = 4'd0;
reg  [7:0] master_tx_fifo_source_payload_mask = 8'd0;
wire master_rx_fifo_sink_valid;
wire master_rx_fifo_sink_ready;
wire master_rx_fifo_sink_first;
wire master_rx_fifo_sink_last;
wire [31:0] master_rx_fifo_sink_payload_data;
reg  master_rx_fifo_source_valid = 1'd0;
wire master_rx_fifo_source_ready;
reg  master_rx_fifo_source_first = 1'd0;
reg  master_rx_fifo_source_last = 1'd0;
reg  [31:0] master_rx_fifo_source_payload_data = 32'd0;
wire port_master_user_port_source_valid;
wire port_master_user_port_source_ready;
wire port_master_user_port_source_first;
wire port_master_user_port_source_last;
wire [31:0] port_master_user_port_source_payload_data;
wire port_master_user_port_sink_valid;
wire port_master_user_port_sink_ready;
wire port_master_user_port_sink_first;
wire port_master_user_port_sink_last;
wire [31:0] port_master_user_port_sink_payload_data;
wire [5:0] port_master_user_port_sink_payload_len;
wire [3:0] port_master_user_port_sink_payload_width;
wire [7:0] port_master_user_port_sink_payload_mask;
wire port_master_internal_port_source_valid;
wire port_master_internal_port_source_ready;
wire port_master_internal_port_source_first;
wire port_master_internal_port_source_last;
wire [31:0] port_master_internal_port_source_payload_data;
wire port_master_internal_port_sink_valid;
wire port_master_internal_port_sink_ready;
wire port_master_internal_port_sink_first;
wire port_master_internal_port_sink_last;
wire [31:0] port_master_internal_port_sink_payload_data;
wire [5:0] port_master_internal_port_sink_payload_len;
wire [3:0] port_master_internal_port_sink_payload_width;
wire [7:0] port_master_internal_port_sink_payload_mask;
wire port_master_request;
wire hpssoc_tx_sink_valid;
reg  hpssoc_tx_sink_ready = 1'd0;
wire hpssoc_tx_sink_first;
wire hpssoc_tx_sink_last;
wire [7:0] hpssoc_tx_sink_payload_data;
reg  [7:0] hpssoc_tx_data = 8'd0;
reg  [3:0] hpssoc_tx_count = 4'd0;
reg  hpssoc_tx_enable = 1'd0;
reg  hpssoc_tx_tick = 1'd0;
reg  [31:0] hpssoc_tx_phase = 32'd0;
reg  hpssoc_rx_source_valid = 1'd0;
wire hpssoc_rx_source_ready;
reg  hpssoc_rx_source_first = 1'd0;
reg  hpssoc_rx_source_last = 1'd0;
reg  [7:0] hpssoc_rx_source_payload_data = 8'd0;
reg  [7:0] hpssoc_rx_data = 8'd0;
reg  [3:0] hpssoc_rx_count = 4'd0;
reg  hpssoc_rx_enable = 1'd0;
reg  hpssoc_rx_tick = 1'd0;
reg  [31:0] hpssoc_rx_phase = 32'd0;
wire hpssoc_rx_rx;
reg  hpssoc_rx_rx_d = 1'd0;
reg  hpssoc_rxtx_re = 1'd0;
wire [7:0] hpssoc_rxtx_r;
reg  hpssoc_rxtx_we = 1'd0;
wire [7:0] hpssoc_rxtx_w;
wire hpssoc_txfull_status;
wire hpssoc_txfull_we;
reg  hpssoc_txfull_re = 1'd0;
wire hpssoc_rxempty_status;
wire hpssoc_rxempty_we;
reg  hpssoc_rxempty_re = 1'd0;
wire hpssoc_irq;
wire hpssoc_tx_status;
reg  hpssoc_tx_pending = 1'd0;
wire hpssoc_tx_trigger;
reg  hpssoc_tx_clear = 1'd0;
reg  hpssoc_tx_trigger_d = 1'd0;
wire hpssoc_rx_status;
reg  hpssoc_rx_pending = 1'd0;
wire hpssoc_rx_trigger;
reg  hpssoc_rx_clear = 1'd0;
reg  hpssoc_rx_trigger_d = 1'd0;
wire hpssoc_tx0;
wire hpssoc_rx0;
reg  [1:0] hpssoc_status_status = 2'd0;
wire hpssoc_status_we;
reg  hpssoc_status_re = 1'd0;
wire hpssoc_tx1;
wire hpssoc_rx1;
reg  [1:0] hpssoc_pending_status = 2'd0;
wire hpssoc_pending_we;
reg  hpssoc_pending_re = 1'd0;
reg  [1:0] hpssoc_pending_r = 2'd0;
wire hpssoc_tx2;
wire hpssoc_rx2;
reg  [1:0] hpssoc_enable_storage = 2'd0;
reg  hpssoc_enable_re = 1'd0;
wire hpssoc_txempty_status;
wire hpssoc_txempty_we;
reg  hpssoc_txempty_re = 1'd0;
wire hpssoc_rxfull_status;
wire hpssoc_rxfull_we;
reg  hpssoc_rxfull_re = 1'd0;
wire hpssoc_uart_sink_valid;
wire hpssoc_uart_sink_ready;
wire hpssoc_uart_sink_first;
wire hpssoc_uart_sink_last;
wire [7:0] hpssoc_uart_sink_payload_data;
wire hpssoc_uart_source_valid;
wire hpssoc_uart_source_ready;
wire hpssoc_uart_source_first;
wire hpssoc_uart_source_last;
wire [7:0] hpssoc_uart_source_payload_data;
wire hpssoc_tx_fifo_sink_valid;
wire hpssoc_tx_fifo_sink_ready;
reg  hpssoc_tx_fifo_sink_first = 1'd0;
reg  hpssoc_tx_fifo_sink_last = 1'd0;
wire [7:0] hpssoc_tx_fifo_sink_payload_data;
wire hpssoc_tx_fifo_source_valid;
wire hpssoc_tx_fifo_source_ready;
wire hpssoc_tx_fifo_source_first;
wire hpssoc_tx_fifo_source_last;
wire [7:0] hpssoc_tx_fifo_source_payload_data;
wire hpssoc_tx_fifo_re;
reg  hpssoc_tx_fifo_readable = 1'd0;
wire hpssoc_tx_fifo_syncfifo_we;
wire hpssoc_tx_fifo_syncfifo_writable;
wire hpssoc_tx_fifo_syncfifo_re;
wire hpssoc_tx_fifo_syncfifo_readable;
wire [9:0] hpssoc_tx_fifo_syncfifo_din;
wire [9:0] hpssoc_tx_fifo_syncfifo_dout;
reg  [4:0] hpssoc_tx_fifo_level0 = 5'd0;
reg  hpssoc_tx_fifo_replace = 1'd0;
reg  [3:0] hpssoc_tx_fifo_produce = 4'd0;
reg  [3:0] hpssoc_tx_fifo_consume = 4'd0;
reg  [3:0] hpssoc_tx_fifo_wrport_adr = 4'd0;
wire [9:0] hpssoc_tx_fifo_wrport_dat_r;
wire hpssoc_tx_fifo_wrport_we;
wire [9:0] hpssoc_tx_fifo_wrport_dat_w;
wire hpssoc_tx_fifo_do_read;
wire [3:0] hpssoc_tx_fifo_rdport_adr;
wire [9:0] hpssoc_tx_fifo_rdport_dat_r;
wire hpssoc_tx_fifo_rdport_re;
wire [4:0] hpssoc_tx_fifo_level1;
wire [7:0] hpssoc_tx_fifo_fifo_in_payload_data;
wire hpssoc_tx_fifo_fifo_in_first;
wire hpssoc_tx_fifo_fifo_in_last;
wire [7:0] hpssoc_tx_fifo_fifo_out_payload_data;
wire hpssoc_tx_fifo_fifo_out_first;
wire hpssoc_tx_fifo_fifo_out_last;
wire hpssoc_rx_fifo_sink_valid;
wire hpssoc_rx_fifo_sink_ready;
wire hpssoc_rx_fifo_sink_first;
wire hpssoc_rx_fifo_sink_last;
wire [7:0] hpssoc_rx_fifo_sink_payload_data;
wire hpssoc_rx_fifo_source_valid;
wire hpssoc_rx_fifo_source_ready;
wire hpssoc_rx_fifo_source_first;
wire hpssoc_rx_fifo_source_last;
wire [7:0] hpssoc_rx_fifo_source_payload_data;
wire hpssoc_rx_fifo_re;
reg  hpssoc_rx_fifo_readable = 1'd0;
wire hpssoc_rx_fifo_syncfifo_we;
wire hpssoc_rx_fifo_syncfifo_writable;
wire hpssoc_rx_fifo_syncfifo_re;
wire hpssoc_rx_fifo_syncfifo_readable;
wire [9:0] hpssoc_rx_fifo_syncfifo_din;
wire [9:0] hpssoc_rx_fifo_syncfifo_dout;
reg  [4:0] hpssoc_rx_fifo_level0 = 5'd0;
reg  hpssoc_rx_fifo_replace = 1'd0;
reg  [3:0] hpssoc_rx_fifo_produce = 4'd0;
reg  [3:0] hpssoc_rx_fifo_consume = 4'd0;
reg  [3:0] hpssoc_rx_fifo_wrport_adr = 4'd0;
wire [9:0] hpssoc_rx_fifo_wrport_dat_r;
wire hpssoc_rx_fifo_wrport_we;
wire [9:0] hpssoc_rx_fifo_wrport_dat_w;
wire hpssoc_rx_fifo_do_read;
wire [3:0] hpssoc_rx_fifo_rdport_adr;
wire [9:0] hpssoc_rx_fifo_rdport_dat_r;
wire hpssoc_rx_fifo_rdport_re;
wire [4:0] hpssoc_rx_fifo_level1;
wire [7:0] hpssoc_rx_fifo_fifo_in_payload_data;
wire hpssoc_rx_fifo_fifo_in_first;
wire hpssoc_rx_fifo_fifo_in_last;
wire [7:0] hpssoc_rx_fifo_fifo_out_payload_data;
wire hpssoc_rx_fifo_fifo_out_first;
wire hpssoc_rx_fifo_fifo_out_last;
reg  [31:0] timer_load_storage = 32'd0;
reg  timer_load_re = 1'd0;
reg  [31:0] timer_reload_storage = 32'd0;
reg  timer_reload_re = 1'd0;
reg  timer_en_storage = 1'd0;
reg  timer_en_re = 1'd0;
reg  timer_update_value_storage = 1'd0;
reg  timer_update_value_re = 1'd0;
reg  [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg  timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg  timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg  timer_zero_clear = 1'd0;
reg  timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg  timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg  timer_pending_re = 1'd0;
reg  timer_pending_r = 1'd0;
wire timer_zero2;
reg  timer_enable_storage = 1'd0;
reg  timer_enable_re = 1'd0;
reg  [31:0] timer_value = 32'd0;
reg  uptime_latch_storage = 1'd0;
reg  uptime_latch_re = 1'd0;
reg  [63:0] uptime_cycles_status = 64'd0;
wire uptime_cycles_we;
reg  uptime_cycles_re = 1'd0;
reg  [63:0] uptime_cycles = 64'd0;
wire [13:0] cfu_lram_bus_lram0_addr;
wire [31:0] cfu_lram_bus_lram0_din;
wire [13:0] cfu_lram_bus_lram1_addr;
wire [31:0] cfu_lram_bus_lram1_din;
wire [13:0] cfu_lram_bus_lram2_addr;
wire [31:0] cfu_lram_bus_lram2_din;
wire [13:0] cfu_lram_bus_lram3_addr;
wire [31:0] cfu_lram_bus_lram3_din;
reg  [1:0] litespiphy_state = 2'd0;
reg  [1:0] litespiphy_next_state = 2'd0;
reg  litespiddrphycore_en_litespiphy_next_value0 = 1'd0;
reg  litespiddrphycore_en_litespiphy_next_value_ce0 = 1'd0;
reg  [7:0] litespiddrphycore_sr_cnt_litespiphy_next_value1 = 8'd0;
reg  litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 = 1'd0;
wire [1:0] litespi_request;
reg  litespi_grant = 1'd0;
reg  litespi_tx_mux_source_valid = 1'd0;
wire litespi_tx_mux_source_ready;
reg  litespi_tx_mux_source_first = 1'd0;
reg  litespi_tx_mux_source_last = 1'd0;
reg  [31:0] litespi_tx_mux_source_payload_data = 32'd0;
reg  [5:0] litespi_tx_mux_source_payload_len = 6'd0;
reg  [3:0] litespi_tx_mux_source_payload_width = 4'd0;
reg  [7:0] litespi_tx_mux_source_payload_mask = 8'd0;
wire litespi_tx_mux_endpoint0_sink_valid;
reg  litespi_tx_mux_endpoint0_sink_ready = 1'd0;
wire litespi_tx_mux_endpoint0_sink_first;
wire litespi_tx_mux_endpoint0_sink_last;
wire [31:0] litespi_tx_mux_endpoint0_sink_payload_data;
wire [5:0] litespi_tx_mux_endpoint0_sink_payload_len;
wire [3:0] litespi_tx_mux_endpoint0_sink_payload_width;
wire [7:0] litespi_tx_mux_endpoint0_sink_payload_mask;
wire litespi_tx_mux_endpoint1_sink_valid;
reg  litespi_tx_mux_endpoint1_sink_ready = 1'd0;
wire litespi_tx_mux_endpoint1_sink_first;
wire litespi_tx_mux_endpoint1_sink_last;
wire [31:0] litespi_tx_mux_endpoint1_sink_payload_data;
wire [5:0] litespi_tx_mux_endpoint1_sink_payload_len;
wire [3:0] litespi_tx_mux_endpoint1_sink_payload_width;
wire [7:0] litespi_tx_mux_endpoint1_sink_payload_mask;
wire litespi_tx_mux_sel;
wire litespi_rx_demux_sink_valid;
reg  litespi_rx_demux_sink_ready = 1'd0;
wire litespi_rx_demux_sink_first;
wire litespi_rx_demux_sink_last;
wire [31:0] litespi_rx_demux_sink_payload_data;
reg  litespi_rx_demux_endpoint0_source_valid = 1'd0;
wire litespi_rx_demux_endpoint0_source_ready;
reg  litespi_rx_demux_endpoint0_source_first = 1'd0;
reg  litespi_rx_demux_endpoint0_source_last = 1'd0;
reg  [31:0] litespi_rx_demux_endpoint0_source_payload_data = 32'd0;
reg  litespi_rx_demux_endpoint1_source_valid = 1'd0;
wire litespi_rx_demux_endpoint1_source_ready;
reg  litespi_rx_demux_endpoint1_source_first = 1'd0;
reg  litespi_rx_demux_endpoint1_source_last = 1'd0;
reg  [31:0] litespi_rx_demux_endpoint1_source_payload_data = 32'd0;
wire litespi_rx_demux_sel;
reg  [3:0] litespi_state = 4'd0;
reg  [3:0] litespi_next_state = 4'd0;
reg  litespimmap_burst_cs_litespi_next_value0 = 1'd0;
reg  litespimmap_burst_cs_litespi_next_value_ce0 = 1'd0;
reg  [29:0] litespimmap_burst_adr_litespi_next_value1 = 30'd0;
reg  litespimmap_burst_adr_litespi_next_value_ce1 = 1'd0;
reg  rs232phytx_state = 1'd0;
reg  rs232phytx_next_state = 1'd0;
reg  [3:0] hpssoc_tx_count_rs232phytx_next_value0 = 4'd0;
reg  hpssoc_tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg  hpssoc_serial_tx_rs232phytx_next_value1 = 1'd0;
reg  hpssoc_serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg  [7:0] hpssoc_tx_data_rs232phytx_next_value2 = 8'd0;
reg  hpssoc_tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg  rs232phyrx_state = 1'd0;
reg  rs232phyrx_next_state = 1'd0;
reg  [3:0] hpssoc_rx_count_rs232phyrx_next_value0 = 4'd0;
reg  hpssoc_rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg  [7:0] hpssoc_rx_data_rs232phyrx_next_value1 = 8'd0;
reg  hpssoc_rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg  [13:0] hpssoc_adr = 14'd0;
reg  hpssoc_we = 1'd0;
reg  [31:0] hpssoc_dat_w = 32'd0;
wire [31:0] hpssoc_dat_r;
wire [29:0] hpssoc_wishbone_adr;
wire [31:0] hpssoc_wishbone_dat_w;
reg  [31:0] hpssoc_wishbone_dat_r = 32'd0;
wire [3:0] hpssoc_wishbone_sel;
wire hpssoc_wishbone_cyc;
wire hpssoc_wishbone_stb;
reg  hpssoc_wishbone_ack = 1'd0;
wire hpssoc_wishbone_we;
wire [2:0] hpssoc_wishbone_cti;
wire [1:0] hpssoc_wishbone_bte;
reg  hpssoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg  [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg  shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire [1:0] request;
reg  grant = 1'd0;
reg  [3:0] slave_sel = 4'd0;
reg  [3:0] slave_sel_r = 4'd0;
reg  error = 1'd0;
wire wait_1;
wire done;
reg  [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg  [31:0] interface0_bank_bus_dat_r = 32'd0;
reg  csrbank0_reset0_re = 1'd0;
wire [1:0] csrbank0_reset0_r;
reg  csrbank0_reset0_we = 1'd0;
wire [1:0] csrbank0_reset0_w;
reg  csrbank0_scratch0_re = 1'd0;
wire [31:0] csrbank0_scratch0_r;
reg  csrbank0_scratch0_we = 1'd0;
wire [31:0] csrbank0_scratch0_w;
reg  csrbank0_bus_errors_re = 1'd0;
wire [31:0] csrbank0_bus_errors_r;
reg  csrbank0_bus_errors_we = 1'd0;
wire [31:0] csrbank0_bus_errors_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg  [31:0] interface1_bank_bus_dat_r = 32'd0;
reg  csrbank1_mmap_dummy_bits0_re = 1'd0;
wire [7:0] csrbank1_mmap_dummy_bits0_r;
reg  csrbank1_mmap_dummy_bits0_we = 1'd0;
wire [7:0] csrbank1_mmap_dummy_bits0_w;
reg  csrbank1_master_cs0_re = 1'd0;
wire csrbank1_master_cs0_r;
reg  csrbank1_master_cs0_we = 1'd0;
wire csrbank1_master_cs0_w;
reg  csrbank1_master_phyconfig0_re = 1'd0;
wire [23:0] csrbank1_master_phyconfig0_r;
reg  csrbank1_master_phyconfig0_we = 1'd0;
wire [23:0] csrbank1_master_phyconfig0_w;
reg  csrbank1_master_status_re = 1'd0;
wire [1:0] csrbank1_master_status_r;
reg  csrbank1_master_status_we = 1'd0;
wire [1:0] csrbank1_master_status_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg  [31:0] interface2_bank_bus_dat_r = 32'd0;
reg  csrbank2_load0_re = 1'd0;
wire [31:0] csrbank2_load0_r;
reg  csrbank2_load0_we = 1'd0;
wire [31:0] csrbank2_load0_w;
reg  csrbank2_reload0_re = 1'd0;
wire [31:0] csrbank2_reload0_r;
reg  csrbank2_reload0_we = 1'd0;
wire [31:0] csrbank2_reload0_w;
reg  csrbank2_en0_re = 1'd0;
wire csrbank2_en0_r;
reg  csrbank2_en0_we = 1'd0;
wire csrbank2_en0_w;
reg  csrbank2_update_value0_re = 1'd0;
wire csrbank2_update_value0_r;
reg  csrbank2_update_value0_we = 1'd0;
wire csrbank2_update_value0_w;
reg  csrbank2_value_re = 1'd0;
wire [31:0] csrbank2_value_r;
reg  csrbank2_value_we = 1'd0;
wire [31:0] csrbank2_value_w;
reg  csrbank2_ev_status_re = 1'd0;
wire csrbank2_ev_status_r;
reg  csrbank2_ev_status_we = 1'd0;
wire csrbank2_ev_status_w;
reg  csrbank2_ev_pending_re = 1'd0;
wire csrbank2_ev_pending_r;
reg  csrbank2_ev_pending_we = 1'd0;
wire csrbank2_ev_pending_w;
reg  csrbank2_ev_enable0_re = 1'd0;
wire csrbank2_ev_enable0_r;
reg  csrbank2_ev_enable0_we = 1'd0;
wire csrbank2_ev_enable0_w;
reg  csrbank2_uptime_latch0_re = 1'd0;
wire csrbank2_uptime_latch0_r;
reg  csrbank2_uptime_latch0_we = 1'd0;
wire csrbank2_uptime_latch0_w;
reg  csrbank2_uptime_cycles1_re = 1'd0;
wire [31:0] csrbank2_uptime_cycles1_r;
reg  csrbank2_uptime_cycles1_we = 1'd0;
wire [31:0] csrbank2_uptime_cycles1_w;
reg  csrbank2_uptime_cycles0_re = 1'd0;
wire [31:0] csrbank2_uptime_cycles0_r;
reg  csrbank2_uptime_cycles0_we = 1'd0;
wire [31:0] csrbank2_uptime_cycles0_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg  [31:0] interface3_bank_bus_dat_r = 32'd0;
reg  csrbank3_txfull_re = 1'd0;
wire csrbank3_txfull_r;
reg  csrbank3_txfull_we = 1'd0;
wire csrbank3_txfull_w;
reg  csrbank3_rxempty_re = 1'd0;
wire csrbank3_rxempty_r;
reg  csrbank3_rxempty_we = 1'd0;
wire csrbank3_rxempty_w;
reg  csrbank3_ev_status_re = 1'd0;
wire [1:0] csrbank3_ev_status_r;
reg  csrbank3_ev_status_we = 1'd0;
wire [1:0] csrbank3_ev_status_w;
reg  csrbank3_ev_pending_re = 1'd0;
wire [1:0] csrbank3_ev_pending_r;
reg  csrbank3_ev_pending_we = 1'd0;
wire [1:0] csrbank3_ev_pending_w;
reg  csrbank3_ev_enable0_re = 1'd0;
wire [1:0] csrbank3_ev_enable0_r;
reg  csrbank3_ev_enable0_we = 1'd0;
wire [1:0] csrbank3_ev_enable0_w;
reg  csrbank3_txempty_re = 1'd0;
wire csrbank3_txempty_r;
reg  csrbank3_txempty_we = 1'd0;
wire csrbank3_txempty_w;
reg  csrbank3_rxfull_re = 1'd0;
wire csrbank3_rxfull_r;
reg  csrbank3_rxfull_we = 1'd0;
wire csrbank3_rxfull_w;
wire csrbank3_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg  state = 1'd0;
reg  next_state = 1'd0;
reg  [29:0] array_muxed0 = 30'd0;
reg  [31:0] array_muxed1 = 32'd0;
reg  [3:0] array_muxed2 = 4'd0;
reg  array_muxed3 = 1'd0;
reg  array_muxed4 = 1'd0;
reg  array_muxed5 = 1'd0;
reg  [2:0] array_muxed6 = 3'd0;
reg  [1:0] array_muxed7 = 2'd0;
wire rst1;
wire latticenxddrtristateimpl0__o;
(* syn_useioff = 1 *) wire latticenxddrtristateimpl0_oe;
wire latticenxddrtristateimpl0__i;
wire latticenxddrtristateimpl1__o;
(* syn_useioff = 1 *) wire latticenxddrtristateimpl1_oe;
wire latticenxddrtristateimpl1__i;
wire latticenxddrtristateimpl2__o;
(* syn_useioff = 1 *) wire latticenxddrtristateimpl2_oe;
wire latticenxddrtristateimpl2__i;
wire latticenxddrtristateimpl3__o;
(* syn_useioff = 1 *) wire latticenxddrtristateimpl3_oe;
wire latticenxddrtristateimpl3__i;
reg  regs0 = 1'd0;
reg  regs1 = 1'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign reset = (soc_rst | cpu_rst);
assign arena_b_addr0 = cfu_lram_bus_lram0_addr;
assign arena_b_addr1 = cfu_lram_bus_lram1_addr;
assign arena_b_addr2 = cfu_lram_bus_lram2_addr;
assign arena_b_addr3 = cfu_lram_bus_lram3_addr;
assign cfu_lram_bus_lram0_din = arena_b_dout0;
assign cfu_lram_bus_lram1_din = arena_b_dout1;
assign cfu_lram_bus_lram2_din = arena_b_dout2;
assign cfu_lram_bus_lram3_din = arena_b_dout3;
assign bus_error = error;
always @(*) begin
	interrupt <= 32'd0;
	interrupt[1] <= timer_irq;
	interrupt[0] <= hpssoc_irq;
end
assign por_clk = sys_clk;
assign sys_clk = clkout;
assign bus_errors_status = bus_errors;
assign lram_datain = lram_bus_dat_w[31:0];
assign lram_cs = 1'd1;
assign lram_wren = ((lram_bus_we & lram_bus_stb) & lram_bus_cyc);
assign lram_bus_dat_r[31:0] = lram_dataout;
assign arena_datain0 = arena_bus_dat_w[31:0];
assign arena_datain1 = arena_bus_dat_w[31:0];
assign arena_datain2 = arena_bus_dat_w[31:0];
assign arena_datain3 = arena_bus_dat_w[31:0];
always @(*) begin
	arena_cs0 <= 1'd0;
	arena_cs1 <= 1'd0;
	arena_cs2 <= 1'd0;
	arena_cs3 <= 1'd0;
	arena_wren0 <= 1'd0;
	arena_wren3 <= 1'd0;
	arena_wren2 <= 1'd0;
	arena_wren1 <= 1'd0;
	arena_bus_dat_r <= 32'd0;
	if ((arena_bus_adr[1:0] == 1'd0)) begin
		arena_cs0 <= 1'd1;
		arena_wren0 <= ((arena_bus_we & arena_bus_stb) & arena_bus_cyc);
		arena_bus_dat_r[31:0] <= arena_dataout0;
	end
	if ((arena_bus_adr[1:0] == 1'd1)) begin
		arena_cs1 <= 1'd1;
		arena_wren1 <= ((arena_bus_we & arena_bus_stb) & arena_bus_cyc);
		arena_bus_dat_r[31:0] <= arena_dataout1;
	end
	if ((arena_bus_adr[1:0] == 2'd2)) begin
		arena_cs2 <= 1'd1;
		arena_wren2 <= ((arena_bus_we & arena_bus_stb) & arena_bus_cyc);
		arena_bus_dat_r[31:0] <= arena_dataout2;
	end
	if ((arena_bus_adr[1:0] == 2'd3)) begin
		arena_cs3 <= 1'd1;
		arena_wren3 <= ((arena_bus_we & arena_bus_stb) & arena_bus_cyc);
		arena_bus_dat_r[31:0] <= arena_dataout3;
	end
end
assign litespiddrphycore_wait = litespiddrphycore_cs;
assign litespiddrphycore_cs_enable = litespiddrphycore_done;
assign spiflash4x_cs_n = (~litespiddrphycore_cs_enable);
assign litespiddrphycore5 = litespiddrphycore_sink_payload_mask;
always @(*) begin
	litespiddrphycore1 <= 4'd0;
	case (litespiddrphycore_sink_payload_width)
		1'd1: begin
			litespiddrphycore1 <= litespiddrphycore_sr_out[31];
		end
		2'd2: begin
			litespiddrphycore1 <= litespiddrphycore_sr_out[31:30];
		end
		3'd4: begin
			litespiddrphycore1 <= litespiddrphycore_sr_out[31:28];
		end
		4'd8: begin
			litespiddrphycore1 <= litespiddrphycore_sr_out[31:24];
		end
	endcase
end
assign litespiddrphycore_source_payload_data = litespiddrphycore_sr_in;
assign litespiddrphycore_done = (litespiddrphycore_count == 1'd0);
always @(*) begin
	litespiddrphycore_sink_ready <= 1'd0;
	litespiddrphycore_sr_cnt_litespiphy_next_value1 <= 8'd0;
	litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd0;
	litespiddrphycore_source_last <= 1'd0;
	litespiddrphycore_sr_out_load <= 1'd0;
	litespiddrphycore_sr_out_shift <= 1'd0;
	litespiddrphycore_source_valid <= 1'd0;
	litespiddrphycore_sr_in_shift <= 1'd0;
	litespiphy_next_state <= 2'd0;
	litespiddrphycore_en_litespiphy_next_value0 <= 1'd0;
	litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd0;
	litespiphy_next_state <= litespiphy_state;
	case (litespiphy_state)
		1'd1: begin
			litespiddrphycore_en_litespiphy_next_value0 <= 1'd1;
			litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd1;
			litespiddrphycore_sr_in_shift <= 1'd1;
			litespiddrphycore_sr_out_shift <= 1'd1;
			litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (litespiddrphycore_sr_cnt - litespiddrphycore_sink_payload_width);
			litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
			if ((litespiddrphycore_sr_cnt == 1'd0)) begin
				litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (3'd4 * litespiddrphycore_sink_payload_width);
				litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
				litespiphy_next_state <= 2'd2;
			end
		end
		2'd2: begin
			litespiddrphycore_en_litespiphy_next_value0 <= 1'd0;
			litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd1;
			litespiddrphycore_sr_in_shift <= 1'd1;
			litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (litespiddrphycore_sr_cnt - litespiddrphycore_sink_payload_width);
			litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
			if ((litespiddrphycore_sr_cnt == 1'd0)) begin
				litespiddrphycore_sink_ready <= 1'd1;
				litespiphy_next_state <= 2'd3;
			end
		end
		2'd3: begin
			litespiddrphycore_source_valid <= 1'd1;
			litespiddrphycore_source_last <= 1'd1;
			if (litespiddrphycore_source_ready) begin
				litespiphy_next_state <= 1'd0;
			end
		end
		default: begin
			litespiddrphycore_en_litespiphy_next_value0 <= 1'd0;
			litespiddrphycore_en_litespiphy_next_value_ce0 <= 1'd1;
			if ((litespiddrphycore_cs_enable & litespiddrphycore_sink_valid)) begin
				litespiddrphycore_sr_cnt_litespiphy_next_value1 <= (litespiddrphycore_sink_payload_len - litespiddrphycore_sink_payload_width);
				litespiddrphycore_sr_cnt_litespiphy_next_value_ce1 <= 1'd1;
				litespiddrphycore_sr_out_load <= 1'd1;
				litespiphy_next_state <= 1'd1;
			end
		end
	endcase
end
assign litespiddrphycore_cs = crossbar_cs;
assign litespimmap_sink_valid = port_mmap_user_port_source_valid;
assign port_mmap_user_port_source_ready = litespimmap_sink_ready;
assign litespimmap_sink_first = port_mmap_user_port_source_first;
assign litespimmap_sink_last = port_mmap_user_port_source_last;
assign litespimmap_sink_payload_data = port_mmap_user_port_source_payload_data;
assign port_mmap_user_port_sink_valid = litespimmap_source_valid;
assign litespimmap_source_ready = port_mmap_user_port_sink_ready;
assign port_mmap_user_port_sink_first = litespimmap_source_first;
assign port_mmap_user_port_sink_last = litespimmap_source_last;
assign port_mmap_user_port_sink_payload_data = litespimmap_source_payload_data;
assign port_mmap_user_port_sink_payload_len = litespimmap_source_payload_len;
assign port_mmap_user_port_sink_payload_width = litespimmap_source_payload_width;
assign port_mmap_user_port_sink_payload_mask = litespimmap_source_payload_mask;
assign master_sink_sink_valid = port_master_user_port_source_valid;
assign port_master_user_port_source_ready = master_sink_sink_ready;
assign master_sink_sink_first = port_master_user_port_source_first;
assign master_sink_sink_last = port_master_user_port_source_last;
assign master_sink_sink_payload_data = port_master_user_port_source_payload_data;
assign port_master_user_port_sink_valid = master_source_source_valid;
assign master_source_source_ready = port_master_user_port_sink_ready;
assign port_master_user_port_sink_first = master_source_source_first;
assign port_master_user_port_sink_last = master_source_source_last;
assign port_master_user_port_sink_payload_data = master_source_source_payload_data;
assign port_master_user_port_sink_payload_len = master_source_source_payload_len;
assign port_master_user_port_sink_payload_width = master_source_source_payload_width;
assign port_master_user_port_sink_payload_mask = master_source_source_payload_mask;
assign litespiddrphycore_sink_valid = crossbar_source_valid;
assign crossbar_source_ready = litespiddrphycore_sink_ready;
assign litespiddrphycore_sink_first = crossbar_source_first;
assign litespiddrphycore_sink_last = crossbar_source_last;
assign litespiddrphycore_sink_payload_data = crossbar_source_payload_data;
assign litespiddrphycore_sink_payload_len = crossbar_source_payload_len;
assign litespiddrphycore_sink_payload_width = crossbar_source_payload_width;
assign litespiddrphycore_sink_payload_mask = crossbar_source_payload_mask;
assign crossbar_sink_valid = litespiddrphycore_source_valid;
assign litespiddrphycore_source_ready = crossbar_sink_ready;
assign crossbar_sink_first = litespiddrphycore_source_first;
assign crossbar_sink_last = litespiddrphycore_source_last;
assign crossbar_sink_payload_data = litespiddrphycore_source_payload_data;
assign port_mmap_internal_port_sink_valid = port_mmap_user_port_sink_valid;
assign port_mmap_user_port_sink_ready = port_mmap_internal_port_sink_ready;
assign port_mmap_internal_port_sink_first = port_mmap_user_port_sink_first;
assign port_mmap_internal_port_sink_last = port_mmap_user_port_sink_last;
assign port_mmap_internal_port_sink_payload_data = port_mmap_user_port_sink_payload_data;
assign port_mmap_internal_port_sink_payload_len = port_mmap_user_port_sink_payload_len;
assign port_mmap_internal_port_sink_payload_width = port_mmap_user_port_sink_payload_width;
assign port_mmap_internal_port_sink_payload_mask = port_mmap_user_port_sink_payload_mask;
assign port_mmap_user_port_source_valid = port_mmap_internal_port_source_valid;
assign port_mmap_internal_port_source_ready = port_mmap_user_port_source_ready;
assign port_mmap_user_port_source_first = port_mmap_internal_port_source_first;
assign port_mmap_user_port_source_last = port_mmap_internal_port_source_last;
assign port_mmap_user_port_source_payload_data = port_mmap_internal_port_source_payload_data;
assign port_mmap_request = litespimmap_cs;
assign port_master_internal_port_sink_valid = port_master_user_port_sink_valid;
assign port_master_user_port_sink_ready = port_master_internal_port_sink_ready;
assign port_master_internal_port_sink_first = port_master_user_port_sink_first;
assign port_master_internal_port_sink_last = port_master_user_port_sink_last;
assign port_master_internal_port_sink_payload_data = port_master_user_port_sink_payload_data;
assign port_master_internal_port_sink_payload_len = port_master_user_port_sink_payload_len;
assign port_master_internal_port_sink_payload_width = port_master_user_port_sink_payload_width;
assign port_master_internal_port_sink_payload_mask = port_master_user_port_sink_payload_mask;
assign port_master_user_port_source_valid = port_master_internal_port_source_valid;
assign port_master_internal_port_source_ready = port_master_user_port_source_ready;
assign port_master_user_port_source_first = port_master_internal_port_source_first;
assign port_master_user_port_source_last = port_master_internal_port_source_last;
assign port_master_user_port_source_payload_data = port_master_internal_port_source_payload_data;
assign port_master_request = master_cs;
assign litespi_tx_mux_endpoint0_sink_valid = port_mmap_internal_port_sink_valid;
assign port_mmap_internal_port_sink_ready = litespi_tx_mux_endpoint0_sink_ready;
assign litespi_tx_mux_endpoint0_sink_first = port_mmap_internal_port_sink_first;
assign litespi_tx_mux_endpoint0_sink_last = port_mmap_internal_port_sink_last;
assign litespi_tx_mux_endpoint0_sink_payload_data = port_mmap_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint0_sink_payload_len = port_mmap_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint0_sink_payload_width = port_mmap_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint0_sink_payload_mask = port_mmap_internal_port_sink_payload_mask;
assign port_mmap_internal_port_source_valid = litespi_rx_demux_endpoint0_source_valid;
assign litespi_rx_demux_endpoint0_source_ready = port_mmap_internal_port_source_ready;
assign port_mmap_internal_port_source_first = litespi_rx_demux_endpoint0_source_first;
assign port_mmap_internal_port_source_last = litespi_rx_demux_endpoint0_source_last;
assign port_mmap_internal_port_source_payload_data = litespi_rx_demux_endpoint0_source_payload_data;
assign litespi_tx_mux_endpoint1_sink_valid = port_master_internal_port_sink_valid;
assign port_master_internal_port_sink_ready = litespi_tx_mux_endpoint1_sink_ready;
assign litespi_tx_mux_endpoint1_sink_first = port_master_internal_port_sink_first;
assign litespi_tx_mux_endpoint1_sink_last = port_master_internal_port_sink_last;
assign litespi_tx_mux_endpoint1_sink_payload_data = port_master_internal_port_sink_payload_data;
assign litespi_tx_mux_endpoint1_sink_payload_len = port_master_internal_port_sink_payload_len;
assign litespi_tx_mux_endpoint1_sink_payload_width = port_master_internal_port_sink_payload_width;
assign litespi_tx_mux_endpoint1_sink_payload_mask = port_master_internal_port_sink_payload_mask;
assign port_master_internal_port_source_valid = litespi_rx_demux_endpoint1_source_valid;
assign litespi_rx_demux_endpoint1_source_ready = port_master_internal_port_source_ready;
assign port_master_internal_port_source_first = litespi_rx_demux_endpoint1_source_first;
assign port_master_internal_port_source_last = litespi_rx_demux_endpoint1_source_last;
assign port_master_internal_port_source_payload_data = litespi_rx_demux_endpoint1_source_payload_data;
assign litespi_request = {port_master_request, port_mmap_request};
assign crossbar_source_valid = litespi_tx_mux_source_valid;
assign litespi_tx_mux_source_ready = crossbar_source_ready;
assign crossbar_source_first = litespi_tx_mux_source_first;
assign crossbar_source_last = litespi_tx_mux_source_last;
assign crossbar_source_payload_data = litespi_tx_mux_source_payload_data;
assign crossbar_source_payload_len = litespi_tx_mux_source_payload_len;
assign crossbar_source_payload_width = litespi_tx_mux_source_payload_width;
assign crossbar_source_payload_mask = litespi_tx_mux_source_payload_mask;
assign litespi_tx_mux_sel = litespi_grant;
assign litespi_rx_demux_sink_valid = crossbar_sink_valid;
assign crossbar_sink_ready = litespi_rx_demux_sink_ready;
assign litespi_rx_demux_sink_first = crossbar_sink_first;
assign litespi_rx_demux_sink_last = crossbar_sink_last;
assign litespi_rx_demux_sink_payload_data = crossbar_sink_payload_data;
assign litespi_rx_demux_sel = litespi_grant;
always @(*) begin
	crossbar_cs <= 1'd0;
	case (litespi_grant)
		1'd0: begin
			crossbar_cs <= litespimmap_cs;
		end
		1'd1: begin
			crossbar_cs <= master_cs;
		end
	endcase
end
always @(*) begin
	litespi_tx_mux_source_valid <= 1'd0;
	litespi_tx_mux_endpoint1_sink_ready <= 1'd0;
	litespi_tx_mux_source_first <= 1'd0;
	litespi_tx_mux_source_last <= 1'd0;
	litespi_tx_mux_source_payload_data <= 32'd0;
	litespi_tx_mux_source_payload_len <= 6'd0;
	litespi_tx_mux_source_payload_width <= 4'd0;
	litespi_tx_mux_source_payload_mask <= 8'd0;
	litespi_tx_mux_endpoint0_sink_ready <= 1'd0;
	case (litespi_tx_mux_sel)
		1'd0: begin
			litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint0_sink_valid;
			litespi_tx_mux_endpoint0_sink_ready <= litespi_tx_mux_source_ready;
			litespi_tx_mux_source_first <= litespi_tx_mux_endpoint0_sink_first;
			litespi_tx_mux_source_last <= litespi_tx_mux_endpoint0_sink_last;
			litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint0_sink_payload_data;
			litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint0_sink_payload_len;
			litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint0_sink_payload_width;
			litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint0_sink_payload_mask;
		end
		1'd1: begin
			litespi_tx_mux_source_valid <= litespi_tx_mux_endpoint1_sink_valid;
			litespi_tx_mux_endpoint1_sink_ready <= litespi_tx_mux_source_ready;
			litespi_tx_mux_source_first <= litespi_tx_mux_endpoint1_sink_first;
			litespi_tx_mux_source_last <= litespi_tx_mux_endpoint1_sink_last;
			litespi_tx_mux_source_payload_data <= litespi_tx_mux_endpoint1_sink_payload_data;
			litespi_tx_mux_source_payload_len <= litespi_tx_mux_endpoint1_sink_payload_len;
			litespi_tx_mux_source_payload_width <= litespi_tx_mux_endpoint1_sink_payload_width;
			litespi_tx_mux_source_payload_mask <= litespi_tx_mux_endpoint1_sink_payload_mask;
		end
	endcase
end
always @(*) begin
	litespi_rx_demux_endpoint0_source_valid <= 1'd0;
	litespi_rx_demux_endpoint0_source_first <= 1'd0;
	litespi_rx_demux_endpoint0_source_last <= 1'd0;
	litespi_rx_demux_endpoint0_source_payload_data <= 32'd0;
	litespi_rx_demux_endpoint1_source_valid <= 1'd0;
	litespi_rx_demux_endpoint1_source_first <= 1'd0;
	litespi_rx_demux_endpoint1_source_last <= 1'd0;
	litespi_rx_demux_endpoint1_source_payload_data <= 32'd0;
	litespi_rx_demux_sink_ready <= 1'd0;
	case (litespi_rx_demux_sel)
		1'd0: begin
			litespi_rx_demux_endpoint0_source_valid <= litespi_rx_demux_sink_valid;
			litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint0_source_ready;
			litespi_rx_demux_endpoint0_source_first <= litespi_rx_demux_sink_first;
			litespi_rx_demux_endpoint0_source_last <= litespi_rx_demux_sink_last;
			litespi_rx_demux_endpoint0_source_payload_data <= litespi_rx_demux_sink_payload_data;
		end
		1'd1: begin
			litespi_rx_demux_endpoint1_source_valid <= litespi_rx_demux_sink_valid;
			litespi_rx_demux_sink_ready <= litespi_rx_demux_endpoint1_source_ready;
			litespi_rx_demux_endpoint1_source_first <= litespi_rx_demux_sink_first;
			litespi_rx_demux_endpoint1_source_last <= litespi_rx_demux_sink_last;
			litespi_rx_demux_endpoint1_source_payload_data <= litespi_rx_demux_sink_payload_data;
		end
	endcase
end
assign litespimmap_spi_dummy_bits = litespimmap_storage;
assign litespimmap_done = (litespimmap_count == 1'd0);
always @(*) begin
	litespimmap_wait <= 1'd0;
	litespimmap_source_valid <= 1'd0;
	litespimmap_source_last <= 1'd0;
	litespimmap_source_payload_data <= 32'd0;
	litespimmap_source_payload_len <= 6'd0;
	litespimmap_source_payload_width <= 4'd0;
	litespimmap_source_payload_mask <= 8'd0;
	litespimmap_sink_ready <= 1'd0;
	litespi_next_state <= 4'd0;
	litespimmap_burst_cs_litespi_next_value0 <= 1'd0;
	litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd0;
	litespimmap_bus_dat_r <= 32'd0;
	litespimmap_burst_adr_litespi_next_value1 <= 30'd0;
	litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd0;
	litespimmap_bus_ack <= 1'd0;
	litespimmap_cs <= 1'd0;
	litespi_next_state <= litespi_state;
	case (litespi_state)
		1'd1: begin
			litespimmap_cs <= 1'd1;
			litespimmap_source_valid <= 1'd1;
			litespimmap_source_payload_data <= 7'd107;
			litespimmap_source_payload_len <= 4'd8;
			litespimmap_source_payload_width <= 1'd1;
			litespimmap_source_payload_mask <= 1'd1;
			litespimmap_burst_adr_litespi_next_value1 <= litespimmap_bus_adr;
			litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (litespimmap_source_ready) begin
				litespi_next_state <= 2'd2;
			end
		end
		2'd2: begin
			litespimmap_cs <= 1'd1;
			litespimmap_sink_ready <= 1'd1;
			if (litespimmap_sink_valid) begin
				litespi_next_state <= 2'd3;
			end
		end
		2'd3: begin
			litespimmap_cs <= 1'd1;
			litespimmap_source_valid <= 1'd1;
			litespimmap_source_payload_width <= 1'd1;
			litespimmap_source_payload_mask <= 1'd1;
			litespimmap_source_payload_data <= {litespimmap_bus_adr, litespimmap};
			litespimmap_source_payload_len <= 5'd24;
			litespimmap_burst_cs_litespi_next_value0 <= 1'd1;
			litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			litespimmap_burst_adr_litespi_next_value1 <= litespimmap_bus_adr;
			litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (litespimmap_source_ready) begin
				litespi_next_state <= 3'd4;
			end
		end
		3'd4: begin
			litespimmap_cs <= 1'd1;
			litespimmap_sink_ready <= 1'd1;
			if (litespimmap_sink_valid) begin
				if ((litespimmap_spi_dummy_bits == 1'd0)) begin
					litespi_next_state <= 3'd7;
				end else begin
					litespi_next_state <= 3'd5;
				end
			end
		end
		3'd5: begin
			litespimmap_cs <= 1'd1;
			litespimmap_source_valid <= 1'd1;
			litespimmap_source_payload_width <= 1'd1;
			litespimmap_source_payload_mask <= 1'd1;
			litespimmap_source_payload_data <= litespimmap_dummy;
			litespimmap_source_payload_len <= litespimmap_spi_dummy_bits;
			litespimmap_burst_cs_litespi_next_value0 <= 1'd1;
			litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			litespimmap_burst_adr_litespi_next_value1 <= litespimmap_bus_adr;
			litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
			if (litespimmap_source_ready) begin
				litespi_next_state <= 3'd6;
			end
		end
		3'd6: begin
			litespimmap_cs <= 1'd1;
			litespimmap_sink_ready <= 1'd1;
			if (litespimmap_sink_valid) begin
				litespi_next_state <= 3'd7;
			end
		end
		3'd7: begin
			litespimmap_cs <= 1'd1;
			litespimmap_source_valid <= 1'd1;
			litespimmap_source_last <= 1'd1;
			litespimmap_source_payload_width <= 3'd4;
			litespimmap_source_payload_len <= 6'd32;
			litespimmap_source_payload_mask <= 1'd0;
			if (litespimmap_source_ready) begin
				litespi_next_state <= 4'd8;
			end
		end
		4'd8: begin
			litespimmap_cs <= 1'd1;
			litespimmap_sink_ready <= 1'd1;
			litespimmap_bus_dat_r <= {litespimmap_sink_payload_data[7:0], litespimmap_sink_payload_data[15:8], litespimmap_sink_payload_data[23:16], litespimmap_sink_payload_data[31:24]};
			if (litespimmap_sink_valid) begin
				litespimmap_bus_ack <= 1'd1;
				litespimmap_burst_adr_litespi_next_value1 <= (litespimmap_burst_adr + 1'd1);
				litespimmap_burst_adr_litespi_next_value_ce1 <= 1'd1;
				litespi_next_state <= 1'd0;
			end
		end
		default: begin
			litespimmap_wait <= 1'd1;
			litespimmap_burst_cs_litespi_next_value0 <= (litespimmap_burst_cs & (~litespimmap_done));
			litespimmap_burst_cs_litespi_next_value_ce0 <= 1'd1;
			litespimmap_cs <= litespimmap_burst_cs;
			if (((litespimmap_bus_cyc & litespimmap_bus_stb) & (~litespimmap_bus_we))) begin
				if ((litespimmap_burst_cs & (litespimmap_bus_adr == litespimmap_burst_adr))) begin
					litespi_next_state <= 3'd7;
				end else begin
					litespimmap_cs <= 1'd0;
					litespi_next_state <= 1'd1;
				end
			end
		end
	endcase
end
assign master_rx_fifo_sink_valid = master_sink_sink_valid;
assign master_sink_sink_ready = master_rx_fifo_sink_ready;
assign master_rx_fifo_sink_first = master_sink_sink_first;
assign master_rx_fifo_sink_last = master_sink_sink_last;
assign master_rx_fifo_sink_payload_data = master_sink_sink_payload_data;
assign master_source_source_valid = master_tx_fifo_source_valid;
assign master_tx_fifo_source_ready = master_source_source_ready;
assign master_source_source_first = master_tx_fifo_source_first;
assign master_source_source_last = master_tx_fifo_source_last;
assign master_source_source_payload_data = master_tx_fifo_source_payload_data;
assign master_source_source_payload_len = master_tx_fifo_source_payload_len;
assign master_source_source_payload_width = master_tx_fifo_source_payload_width;
assign master_source_source_payload_mask = master_tx_fifo_source_payload_mask;
assign master_cs = master_cs_storage;
assign master_tx_fifo_sink_valid = master_rxtx_re;
assign master_tx_ready = master_tx_fifo_sink_ready;
assign master_tx_fifo_sink_payload_data = master_rxtx_r;
assign master_tx_fifo_sink_payload_len = master_len;
assign master_tx_fifo_sink_payload_width = master_width;
assign master_tx_fifo_sink_payload_mask = master_mask;
assign master_tx_fifo_sink_last = 1'd1;
assign master_rx_fifo_source_ready = master_rxtx_we;
assign master_rx_ready = master_rx_fifo_source_valid;
assign master_rxtx_w = master_rx_fifo_source_payload_data;
assign master_tx_fifo_sink_ready = ((~master_tx_fifo_source_valid) | master_tx_fifo_source_ready);
assign master_rx_fifo_sink_ready = ((~master_rx_fifo_source_valid) | master_rx_fifo_source_ready);
always @(*) begin
	hpssoc_tx_sink_ready <= 1'd0;
	hpssoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
	hpssoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	hpssoc_tx_data_rs232phytx_next_value2 <= 8'd0;
	hpssoc_tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	hpssoc_tx_enable <= 1'd0;
	rs232phytx_next_state <= 1'd0;
	hpssoc_tx_count_rs232phytx_next_value0 <= 4'd0;
	hpssoc_tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	rs232phytx_next_state <= rs232phytx_state;
	case (rs232phytx_state)
		1'd1: begin
			hpssoc_tx_enable <= 1'd1;
			if (hpssoc_tx_tick) begin
				hpssoc_serial_tx_rs232phytx_next_value1 <= hpssoc_tx_data;
				hpssoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				hpssoc_tx_count_rs232phytx_next_value0 <= (hpssoc_tx_count + 1'd1);
				hpssoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				hpssoc_tx_data_rs232phytx_next_value2 <= {1'd1, hpssoc_tx_data[7:1]};
				hpssoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((hpssoc_tx_count == 4'd9)) begin
					hpssoc_tx_sink_ready <= 1'd1;
					rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			hpssoc_tx_count_rs232phytx_next_value0 <= 1'd0;
			hpssoc_tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			hpssoc_serial_tx_rs232phytx_next_value1 <= 1'd1;
			hpssoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (hpssoc_tx_sink_valid) begin
				hpssoc_serial_tx_rs232phytx_next_value1 <= 1'd0;
				hpssoc_serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				hpssoc_tx_data_rs232phytx_next_value2 <= hpssoc_tx_sink_payload_data;
				hpssoc_tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	hpssoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	hpssoc_rx_source_valid <= 1'd0;
	hpssoc_rx_data_rs232phyrx_next_value1 <= 8'd0;
	hpssoc_rx_source_payload_data <= 8'd0;
	hpssoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	hpssoc_rx_enable <= 1'd0;
	rs232phyrx_next_state <= 1'd0;
	hpssoc_rx_count_rs232phyrx_next_value0 <= 4'd0;
	rs232phyrx_next_state <= rs232phyrx_state;
	case (rs232phyrx_state)
		1'd1: begin
			hpssoc_rx_enable <= 1'd1;
			if (hpssoc_rx_tick) begin
				hpssoc_rx_count_rs232phyrx_next_value0 <= (hpssoc_rx_count + 1'd1);
				hpssoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				hpssoc_rx_data_rs232phyrx_next_value1 <= {hpssoc_rx_rx, hpssoc_rx_data[7:1]};
				hpssoc_rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((hpssoc_rx_count == 4'd9)) begin
					hpssoc_rx_source_valid <= (hpssoc_rx_rx == 1'd1);
					hpssoc_rx_source_payload_data <= hpssoc_rx_data;
					rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			hpssoc_rx_count_rs232phyrx_next_value0 <= 1'd0;
			hpssoc_rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((hpssoc_rx_rx == 1'd0) & (hpssoc_rx_rx_d == 1'd1))) begin
				rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign hpssoc_uart_sink_valid = hpssoc_rx_source_valid;
assign hpssoc_rx_source_ready = hpssoc_uart_sink_ready;
assign hpssoc_uart_sink_first = hpssoc_rx_source_first;
assign hpssoc_uart_sink_last = hpssoc_rx_source_last;
assign hpssoc_uart_sink_payload_data = hpssoc_rx_source_payload_data;
assign hpssoc_tx_sink_valid = hpssoc_uart_source_valid;
assign hpssoc_uart_source_ready = hpssoc_tx_sink_ready;
assign hpssoc_tx_sink_first = hpssoc_uart_source_first;
assign hpssoc_tx_sink_last = hpssoc_uart_source_last;
assign hpssoc_tx_sink_payload_data = hpssoc_uart_source_payload_data;
assign hpssoc_tx_fifo_sink_valid = hpssoc_rxtx_re;
assign hpssoc_tx_fifo_sink_payload_data = hpssoc_rxtx_r;
assign hpssoc_uart_source_valid = hpssoc_tx_fifo_source_valid;
assign hpssoc_tx_fifo_source_ready = hpssoc_uart_source_ready;
assign hpssoc_uart_source_first = hpssoc_tx_fifo_source_first;
assign hpssoc_uart_source_last = hpssoc_tx_fifo_source_last;
assign hpssoc_uart_source_payload_data = hpssoc_tx_fifo_source_payload_data;
assign hpssoc_txfull_status = (~hpssoc_tx_fifo_sink_ready);
assign hpssoc_txempty_status = (~hpssoc_tx_fifo_source_valid);
assign hpssoc_tx_trigger = hpssoc_tx_fifo_sink_ready;
assign hpssoc_rx_fifo_sink_valid = hpssoc_uart_sink_valid;
assign hpssoc_uart_sink_ready = hpssoc_rx_fifo_sink_ready;
assign hpssoc_rx_fifo_sink_first = hpssoc_uart_sink_first;
assign hpssoc_rx_fifo_sink_last = hpssoc_uart_sink_last;
assign hpssoc_rx_fifo_sink_payload_data = hpssoc_uart_sink_payload_data;
assign hpssoc_rxtx_w = hpssoc_rx_fifo_source_payload_data;
assign hpssoc_rx_fifo_source_ready = (hpssoc_rx_clear | (1'd0 & hpssoc_rxtx_we));
assign hpssoc_rxempty_status = (~hpssoc_rx_fifo_source_valid);
assign hpssoc_rxfull_status = (~hpssoc_rx_fifo_sink_ready);
assign hpssoc_rx_trigger = hpssoc_rx_fifo_source_valid;
assign hpssoc_tx0 = hpssoc_tx_status;
assign hpssoc_tx1 = hpssoc_tx_pending;
always @(*) begin
	hpssoc_tx_clear <= 1'd0;
	if ((hpssoc_pending_re & hpssoc_pending_r[0])) begin
		hpssoc_tx_clear <= 1'd1;
	end
end
assign hpssoc_rx0 = hpssoc_rx_status;
assign hpssoc_rx1 = hpssoc_rx_pending;
always @(*) begin
	hpssoc_rx_clear <= 1'd0;
	if ((hpssoc_pending_re & hpssoc_pending_r[1])) begin
		hpssoc_rx_clear <= 1'd1;
	end
end
assign hpssoc_irq = ((hpssoc_pending_status[0] & hpssoc_enable_storage[0]) | (hpssoc_pending_status[1] & hpssoc_enable_storage[1]));
assign hpssoc_tx_status = hpssoc_tx_trigger;
assign hpssoc_rx_status = hpssoc_rx_trigger;
assign hpssoc_tx_fifo_syncfifo_din = {hpssoc_tx_fifo_fifo_in_last, hpssoc_tx_fifo_fifo_in_first, hpssoc_tx_fifo_fifo_in_payload_data};
assign {hpssoc_tx_fifo_fifo_out_last, hpssoc_tx_fifo_fifo_out_first, hpssoc_tx_fifo_fifo_out_payload_data} = hpssoc_tx_fifo_syncfifo_dout;
assign hpssoc_tx_fifo_sink_ready = hpssoc_tx_fifo_syncfifo_writable;
assign hpssoc_tx_fifo_syncfifo_we = hpssoc_tx_fifo_sink_valid;
assign hpssoc_tx_fifo_fifo_in_first = hpssoc_tx_fifo_sink_first;
assign hpssoc_tx_fifo_fifo_in_last = hpssoc_tx_fifo_sink_last;
assign hpssoc_tx_fifo_fifo_in_payload_data = hpssoc_tx_fifo_sink_payload_data;
assign hpssoc_tx_fifo_source_valid = hpssoc_tx_fifo_readable;
assign hpssoc_tx_fifo_source_first = hpssoc_tx_fifo_fifo_out_first;
assign hpssoc_tx_fifo_source_last = hpssoc_tx_fifo_fifo_out_last;
assign hpssoc_tx_fifo_source_payload_data = hpssoc_tx_fifo_fifo_out_payload_data;
assign hpssoc_tx_fifo_re = hpssoc_tx_fifo_source_ready;
assign hpssoc_tx_fifo_syncfifo_re = (hpssoc_tx_fifo_syncfifo_readable & ((~hpssoc_tx_fifo_readable) | hpssoc_tx_fifo_re));
assign hpssoc_tx_fifo_level1 = (hpssoc_tx_fifo_level0 + hpssoc_tx_fifo_readable);
always @(*) begin
	hpssoc_tx_fifo_wrport_adr <= 4'd0;
	if (hpssoc_tx_fifo_replace) begin
		hpssoc_tx_fifo_wrport_adr <= (hpssoc_tx_fifo_produce - 1'd1);
	end else begin
		hpssoc_tx_fifo_wrport_adr <= hpssoc_tx_fifo_produce;
	end
end
assign hpssoc_tx_fifo_wrport_dat_w = hpssoc_tx_fifo_syncfifo_din;
assign hpssoc_tx_fifo_wrport_we = (hpssoc_tx_fifo_syncfifo_we & (hpssoc_tx_fifo_syncfifo_writable | hpssoc_tx_fifo_replace));
assign hpssoc_tx_fifo_do_read = (hpssoc_tx_fifo_syncfifo_readable & hpssoc_tx_fifo_syncfifo_re);
assign hpssoc_tx_fifo_rdport_adr = hpssoc_tx_fifo_consume;
assign hpssoc_tx_fifo_syncfifo_dout = hpssoc_tx_fifo_rdport_dat_r;
assign hpssoc_tx_fifo_rdport_re = hpssoc_tx_fifo_do_read;
assign hpssoc_tx_fifo_syncfifo_writable = (hpssoc_tx_fifo_level0 != 5'd16);
assign hpssoc_tx_fifo_syncfifo_readable = (hpssoc_tx_fifo_level0 != 1'd0);
assign hpssoc_rx_fifo_syncfifo_din = {hpssoc_rx_fifo_fifo_in_last, hpssoc_rx_fifo_fifo_in_first, hpssoc_rx_fifo_fifo_in_payload_data};
assign {hpssoc_rx_fifo_fifo_out_last, hpssoc_rx_fifo_fifo_out_first, hpssoc_rx_fifo_fifo_out_payload_data} = hpssoc_rx_fifo_syncfifo_dout;
assign hpssoc_rx_fifo_sink_ready = hpssoc_rx_fifo_syncfifo_writable;
assign hpssoc_rx_fifo_syncfifo_we = hpssoc_rx_fifo_sink_valid;
assign hpssoc_rx_fifo_fifo_in_first = hpssoc_rx_fifo_sink_first;
assign hpssoc_rx_fifo_fifo_in_last = hpssoc_rx_fifo_sink_last;
assign hpssoc_rx_fifo_fifo_in_payload_data = hpssoc_rx_fifo_sink_payload_data;
assign hpssoc_rx_fifo_source_valid = hpssoc_rx_fifo_readable;
assign hpssoc_rx_fifo_source_first = hpssoc_rx_fifo_fifo_out_first;
assign hpssoc_rx_fifo_source_last = hpssoc_rx_fifo_fifo_out_last;
assign hpssoc_rx_fifo_source_payload_data = hpssoc_rx_fifo_fifo_out_payload_data;
assign hpssoc_rx_fifo_re = hpssoc_rx_fifo_source_ready;
assign hpssoc_rx_fifo_syncfifo_re = (hpssoc_rx_fifo_syncfifo_readable & ((~hpssoc_rx_fifo_readable) | hpssoc_rx_fifo_re));
assign hpssoc_rx_fifo_level1 = (hpssoc_rx_fifo_level0 + hpssoc_rx_fifo_readable);
always @(*) begin
	hpssoc_rx_fifo_wrport_adr <= 4'd0;
	if (hpssoc_rx_fifo_replace) begin
		hpssoc_rx_fifo_wrport_adr <= (hpssoc_rx_fifo_produce - 1'd1);
	end else begin
		hpssoc_rx_fifo_wrport_adr <= hpssoc_rx_fifo_produce;
	end
end
assign hpssoc_rx_fifo_wrport_dat_w = hpssoc_rx_fifo_syncfifo_din;
assign hpssoc_rx_fifo_wrport_we = (hpssoc_rx_fifo_syncfifo_we & (hpssoc_rx_fifo_syncfifo_writable | hpssoc_rx_fifo_replace));
assign hpssoc_rx_fifo_do_read = (hpssoc_rx_fifo_syncfifo_readable & hpssoc_rx_fifo_syncfifo_re);
assign hpssoc_rx_fifo_rdport_adr = hpssoc_rx_fifo_consume;
assign hpssoc_rx_fifo_syncfifo_dout = hpssoc_rx_fifo_rdport_dat_r;
assign hpssoc_rx_fifo_rdport_re = hpssoc_rx_fifo_do_read;
assign hpssoc_rx_fifo_syncfifo_writable = (hpssoc_rx_fifo_level0 != 5'd16);
assign hpssoc_rx_fifo_syncfifo_readable = (hpssoc_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
always @(*) begin
	hpssoc_wishbone_dat_r <= 32'd0;
	next_state <= 1'd0;
	hpssoc_we <= 1'd0;
	hpssoc_adr <= 14'd0;
	hpssoc_wishbone_ack <= 1'd0;
	hpssoc_dat_w <= 32'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			hpssoc_wishbone_ack <= 1'd1;
			hpssoc_wishbone_dat_r <= hpssoc_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			hpssoc_dat_w <= hpssoc_wishbone_dat_w;
			if ((hpssoc_wishbone_cyc & hpssoc_wishbone_stb)) begin
				hpssoc_adr <= hpssoc_wishbone_adr;
				hpssoc_we <= (hpssoc_wishbone_we & (hpssoc_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign ibus_dat_r = shared_dat_r;
assign dbus_dat_r = shared_dat_r;
assign ibus_ack = (shared_ack & (grant == 1'd0));
assign dbus_ack = (shared_ack & (grant == 1'd1));
assign ibus_err = (shared_err & (grant == 1'd0));
assign dbus_err = (shared_err & (grant == 1'd1));
assign request = {dbus_cyc, ibus_cyc};
always @(*) begin
	slave_sel <= 4'd0;
	slave_sel[0] <= (shared_adr[29:14] == 15'd16384);
	slave_sel[1] <= (shared_adr[29:16] == 13'd6144);
	slave_sel[2] <= (shared_adr[29:22] == 6'd32);
	slave_sel[3] <= (shared_adr[29:14] == 16'd61440);
end
assign lram_bus_adr = shared_adr;
assign lram_bus_dat_w = shared_dat_w;
assign lram_bus_sel = shared_sel;
assign lram_bus_stb = shared_stb;
assign lram_bus_we = shared_we;
assign lram_bus_cti = shared_cti;
assign lram_bus_bte = shared_bte;
assign arena_bus_adr = shared_adr;
assign arena_bus_dat_w = shared_dat_w;
assign arena_bus_sel = shared_sel;
assign arena_bus_stb = shared_stb;
assign arena_bus_we = shared_we;
assign arena_bus_cti = shared_cti;
assign arena_bus_bte = shared_bte;
assign litespimmap_bus_adr = shared_adr;
assign litespimmap_bus_dat_w = shared_dat_w;
assign litespimmap_bus_sel = shared_sel;
assign litespimmap_bus_stb = shared_stb;
assign litespimmap_bus_we = shared_we;
assign litespimmap_bus_cti = shared_cti;
assign litespimmap_bus_bte = shared_bte;
assign hpssoc_wishbone_adr = shared_adr;
assign hpssoc_wishbone_dat_w = shared_dat_w;
assign hpssoc_wishbone_sel = shared_sel;
assign hpssoc_wishbone_stb = shared_stb;
assign hpssoc_wishbone_we = shared_we;
assign hpssoc_wishbone_cti = shared_cti;
assign hpssoc_wishbone_bte = shared_bte;
assign lram_bus_cyc = (shared_cyc & slave_sel[0]);
assign arena_bus_cyc = (shared_cyc & slave_sel[1]);
assign litespimmap_bus_cyc = (shared_cyc & slave_sel[2]);
assign hpssoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((lram_bus_err | arena_bus_err) | litespimmap_bus_err) | hpssoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	error <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= 1'd0;
	shared_ack <= (((lram_bus_ack | arena_bus_ack) | litespimmap_bus_ack) | hpssoc_wishbone_ack);
	shared_dat_r <= (((({32{slave_sel_r[0]}} & lram_bus_dat_r) | ({32{slave_sel_r[1]}} & arena_bus_dat_r)) | ({32{slave_sel_r[2]}} & litespimmap_bus_dat_r)) | ({32{slave_sel_r[3]}} & hpssoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 2'd2);
assign csrbank0_reset0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank0_reset0_re <= 1'd0;
	csrbank0_reset0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_reset0_re <= interface0_bank_bus_we;
		csrbank0_reset0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_scratch0_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank0_scratch0_re <= 1'd0;
	csrbank0_scratch0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank0_scratch0_re <= interface0_bank_bus_we;
		csrbank0_scratch0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_bus_errors_r = interface0_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank0_bus_errors_we <= 1'd0;
	csrbank0_bus_errors_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank0_bus_errors_re <= interface0_bank_bus_we;
		csrbank0_bus_errors_we <= (~interface0_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign csrbank0_reset0_w = reset_storage[1:0];
assign csrbank0_scratch0_w = scratch_storage[31:0];
assign csrbank0_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank0_bus_errors_we;
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 1'd0);
assign csrbank1_mmap_dummy_bits0_r = interface1_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank1_mmap_dummy_bits0_we <= 1'd0;
	csrbank1_mmap_dummy_bits0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_mmap_dummy_bits0_re <= interface1_bank_bus_we;
		csrbank1_mmap_dummy_bits0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_master_cs0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_master_cs0_we <= 1'd0;
	csrbank1_master_cs0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank1_master_cs0_re <= interface1_bank_bus_we;
		csrbank1_master_cs0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_master_phyconfig0_r = interface1_bank_bus_dat_w[23:0];
always @(*) begin
	csrbank1_master_phyconfig0_re <= 1'd0;
	csrbank1_master_phyconfig0_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank1_master_phyconfig0_re <= interface1_bank_bus_we;
		csrbank1_master_phyconfig0_we <= (~interface1_bank_bus_we);
	end
end
assign master_rxtx_r = interface1_bank_bus_dat_w[31:0];
always @(*) begin
	master_rxtx_re <= 1'd0;
	master_rxtx_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
		master_rxtx_re <= interface1_bank_bus_we;
		master_rxtx_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_master_status_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank1_master_status_we <= 1'd0;
	csrbank1_master_status_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank1_master_status_re <= interface1_bank_bus_we;
		csrbank1_master_status_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_mmap_dummy_bits0_w = litespimmap_storage[7:0];
assign csrbank1_master_cs0_w = master_cs_storage;
assign master_len = master_phyconfig_storage[7:0];
assign master_width = master_phyconfig_storage[11:8];
assign master_mask = master_phyconfig_storage[23:16];
assign csrbank1_master_phyconfig0_w = master_phyconfig_storage[23:0];
always @(*) begin
	master_status_status <= 2'd0;
	master_status_status[0] <= master_tx_ready;
	master_status_status[1] <= master_rx_ready;
end
assign csrbank1_master_status_w = master_status_status[1:0];
assign master_status_we = csrbank1_master_status_we;
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 2'd3);
assign csrbank2_load0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_load0_re <= 1'd0;
	csrbank2_load0_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank2_load0_re <= interface2_bank_bus_we;
		csrbank2_load0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_reload0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_reload0_we <= 1'd0;
	csrbank2_reload0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank2_reload0_re <= interface2_bank_bus_we;
		csrbank2_reload0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_en0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_en0_we <= 1'd0;
	csrbank2_en0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank2_en0_re <= interface2_bank_bus_we;
		csrbank2_en0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_update_value0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_update_value0_re <= 1'd0;
	csrbank2_update_value0_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank2_update_value0_re <= interface2_bank_bus_we;
		csrbank2_update_value0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_value_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_value_we <= 1'd0;
	csrbank2_value_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank2_value_re <= interface2_bank_bus_we;
		csrbank2_value_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_ev_status_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_ev_status_we <= 1'd0;
	csrbank2_ev_status_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank2_ev_status_re <= interface2_bank_bus_we;
		csrbank2_ev_status_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_ev_pending_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_ev_pending_re <= 1'd0;
	csrbank2_ev_pending_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank2_ev_pending_re <= interface2_bank_bus_we;
		csrbank2_ev_pending_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_ev_enable0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_ev_enable0_we <= 1'd0;
	csrbank2_ev_enable0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank2_ev_enable0_re <= interface2_bank_bus_we;
		csrbank2_ev_enable0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_uptime_latch0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_uptime_latch0_we <= 1'd0;
	csrbank2_uptime_latch0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank2_uptime_latch0_re <= interface2_bank_bus_we;
		csrbank2_uptime_latch0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_uptime_cycles1_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_uptime_cycles1_re <= 1'd0;
	csrbank2_uptime_cycles1_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd9))) begin
		csrbank2_uptime_cycles1_re <= interface2_bank_bus_we;
		csrbank2_uptime_cycles1_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_uptime_cycles0_r = interface2_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank2_uptime_cycles0_we <= 1'd0;
	csrbank2_uptime_cycles0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 4'd10))) begin
		csrbank2_uptime_cycles0_re <= interface2_bank_bus_we;
		csrbank2_uptime_cycles0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_load0_w = timer_load_storage[31:0];
assign csrbank2_reload0_w = timer_reload_storage[31:0];
assign csrbank2_en0_w = timer_en_storage;
assign csrbank2_update_value0_w = timer_update_value_storage;
assign csrbank2_value_w = timer_value_status[31:0];
assign timer_value_we = csrbank2_value_we;
assign timer_status_status = timer_zero0;
assign csrbank2_ev_status_w = timer_status_status;
assign timer_status_we = csrbank2_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csrbank2_ev_pending_w = timer_pending_status;
assign timer_pending_we = csrbank2_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csrbank2_ev_enable0_w = timer_enable_storage;
assign csrbank2_uptime_latch0_w = uptime_latch_storage;
assign csrbank2_uptime_cycles1_w = uptime_cycles_status[63:32];
assign csrbank2_uptime_cycles0_w = uptime_cycles_status[31:0];
assign uptime_cycles_we = csrbank2_uptime_cycles0_we;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 3'd4);
assign hpssoc_rxtx_r = interface3_bank_bus_dat_w[7:0];
always @(*) begin
	hpssoc_rxtx_re <= 1'd0;
	hpssoc_rxtx_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
		hpssoc_rxtx_re <= interface3_bank_bus_we;
		hpssoc_rxtx_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_txfull_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_txfull_re <= 1'd0;
	csrbank3_txfull_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank3_txfull_re <= interface3_bank_bus_we;
		csrbank3_txfull_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_rxempty_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_rxempty_we <= 1'd0;
	csrbank3_rxempty_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank3_rxempty_re <= interface3_bank_bus_we;
		csrbank3_rxempty_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_ev_status_r = interface3_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank3_ev_status_we <= 1'd0;
	csrbank3_ev_status_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank3_ev_status_re <= interface3_bank_bus_we;
		csrbank3_ev_status_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_ev_pending_r = interface3_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank3_ev_pending_re <= 1'd0;
	csrbank3_ev_pending_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank3_ev_pending_re <= interface3_bank_bus_we;
		csrbank3_ev_pending_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_ev_enable0_r = interface3_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank3_ev_enable0_re <= 1'd0;
	csrbank3_ev_enable0_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank3_ev_enable0_re <= interface3_bank_bus_we;
		csrbank3_ev_enable0_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_txempty_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_txempty_we <= 1'd0;
	csrbank3_txempty_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank3_txempty_re <= interface3_bank_bus_we;
		csrbank3_txempty_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_rxfull_r = interface3_bank_bus_dat_w[0];
always @(*) begin
	csrbank3_rxfull_re <= 1'd0;
	csrbank3_rxfull_we <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank3_rxfull_re <= interface3_bank_bus_we;
		csrbank3_rxfull_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_txfull_w = hpssoc_txfull_status;
assign hpssoc_txfull_we = csrbank3_txfull_we;
assign csrbank3_rxempty_w = hpssoc_rxempty_status;
assign hpssoc_rxempty_we = csrbank3_rxempty_we;
always @(*) begin
	hpssoc_status_status <= 2'd0;
	hpssoc_status_status[0] <= hpssoc_tx0;
	hpssoc_status_status[1] <= hpssoc_rx0;
end
assign csrbank3_ev_status_w = hpssoc_status_status[1:0];
assign hpssoc_status_we = csrbank3_ev_status_we;
always @(*) begin
	hpssoc_pending_status <= 2'd0;
	hpssoc_pending_status[0] <= hpssoc_tx1;
	hpssoc_pending_status[1] <= hpssoc_rx1;
end
assign csrbank3_ev_pending_w = hpssoc_pending_status[1:0];
assign hpssoc_pending_we = csrbank3_ev_pending_we;
assign hpssoc_tx2 = hpssoc_enable_storage[0];
assign hpssoc_rx2 = hpssoc_enable_storage[1];
assign csrbank3_ev_enable0_w = hpssoc_enable_storage[1:0];
assign csrbank3_txempty_w = hpssoc_txempty_status;
assign hpssoc_txempty_we = csrbank3_txempty_we;
assign csrbank3_rxfull_w = hpssoc_rxfull_status;
assign hpssoc_rxfull_we = csrbank3_rxfull_we;
assign csr_interconnect_adr = hpssoc_adr;
assign csr_interconnect_we = hpssoc_we;
assign csr_interconnect_dat_w = hpssoc_dat_w;
assign hpssoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = (((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r);
always @(*) begin
	array_muxed0 <= 30'd0;
	case (grant)
		1'd0: begin
			array_muxed0 <= ibus_adr;
		end
		default: begin
			array_muxed0 <= dbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (grant)
		1'd0: begin
			array_muxed1 <= ibus_dat_w;
		end
		default: begin
			array_muxed1 <= dbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (grant)
		1'd0: begin
			array_muxed2 <= ibus_sel;
		end
		default: begin
			array_muxed2 <= dbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed3 <= ibus_cyc;
		end
		default: begin
			array_muxed3 <= dbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed4 <= ibus_stb;
		end
		default: begin
			array_muxed4 <= dbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		1'd0: begin
			array_muxed5 <= ibus_we;
		end
		default: begin
			array_muxed5 <= dbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (grant)
		1'd0: begin
			array_muxed6 <= ibus_cti;
		end
		default: begin
			array_muxed6 <= dbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (grant)
		1'd0: begin
			array_muxed7 <= ibus_bte;
		end
		default: begin
			array_muxed7 <= dbus_bte;
		end
	endcase
end
assign hpssoc_rx_rx = regs1;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	if ((por_counter != 1'd0)) begin
		por_counter <= (por_counter - 1'd1);
	end
	if (por_rst) begin
		por_counter <= 12'd4095;
	end
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	lram_bus_ack <= ((lram_bus_stb & lram_bus_cyc) & (~lram_bus_ack));
	arena_bus_ack <= ((arena_bus_stb & arena_bus_cyc) & (~arena_bus_ack));
	if (litespiddrphycore_sr_out_load) begin
		litespiddrphycore_sr_out <= (litespiddrphycore_sink_payload_data <<< (6'd32 - litespiddrphycore_sink_payload_len));
	end
	if (litespiddrphycore_sr_out_shift) begin
		litespiddrphycore4 <= litespiddrphycore5;
		litespiddrphycore0 <= litespiddrphycore1;
		case (litespiddrphycore_sink_payload_width)
			1'd1: begin
				litespiddrphycore_sr_out <= {litespiddrphycore_sr_out, litespiddrphycore6};
			end
			2'd2: begin
				litespiddrphycore_sr_out <= {litespiddrphycore_sr_out, litespiddrphycore7};
			end
			3'd4: begin
				litespiddrphycore_sr_out <= {litespiddrphycore_sr_out, litespiddrphycore8};
			end
			4'd8: begin
				litespiddrphycore_sr_out <= {litespiddrphycore_sr_out, litespiddrphycore9};
			end
		endcase
	end
	if (litespiddrphycore_sr_in_shift) begin
		case (litespiddrphycore_sink_payload_width)
			1'd1: begin
				litespiddrphycore_sr_in <= {litespiddrphycore_sr_in, litespiddrphycore2[1]};
			end
			2'd2: begin
				litespiddrphycore_sr_in <= {litespiddrphycore_sr_in, litespiddrphycore2[1:0]};
			end
			3'd4: begin
				litespiddrphycore_sr_in <= {litespiddrphycore_sr_in, litespiddrphycore2[3:0]};
			end
			4'd8: begin
				litespiddrphycore_sr_in <= {litespiddrphycore_sr_in, litespiddrphycore2[3:0]};
			end
		endcase
	end
	if (litespiddrphycore_wait) begin
		if ((~litespiddrphycore_done)) begin
			litespiddrphycore_count <= (litespiddrphycore_count - 1'd1);
		end
	end else begin
		litespiddrphycore_count <= 4'd11;
	end
	litespiphy_state <= litespiphy_next_state;
	if (litespiddrphycore_en_litespiphy_next_value_ce0) begin
		litespiddrphycore_en <= litespiddrphycore_en_litespiphy_next_value0;
	end
	if (litespiddrphycore_sr_cnt_litespiphy_next_value_ce1) begin
		litespiddrphycore_sr_cnt <= litespiddrphycore_sr_cnt_litespiphy_next_value1;
	end
	case (litespi_grant)
		1'd0: begin
			if ((~litespi_request[0])) begin
				if (litespi_request[1]) begin
					litespi_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~litespi_request[1])) begin
				if (litespi_request[0]) begin
					litespi_grant <= 1'd0;
				end
			end
		end
	endcase
	if (litespimmap_wait) begin
		if ((~litespimmap_done)) begin
			litespimmap_count <= (litespimmap_count - 1'd1);
		end
	end else begin
		litespimmap_count <= 9'd256;
	end
	litespi_state <= litespi_next_state;
	if (litespimmap_burst_cs_litespi_next_value_ce0) begin
		litespimmap_burst_cs <= litespimmap_burst_cs_litespi_next_value0;
	end
	if (litespimmap_burst_adr_litespi_next_value_ce1) begin
		litespimmap_burst_adr <= litespimmap_burst_adr_litespi_next_value1;
	end
	if (((~master_tx_fifo_source_valid) | master_tx_fifo_source_ready)) begin
		master_tx_fifo_source_valid <= master_tx_fifo_sink_valid;
		master_tx_fifo_source_first <= master_tx_fifo_sink_first;
		master_tx_fifo_source_last <= master_tx_fifo_sink_last;
		master_tx_fifo_source_payload_data <= master_tx_fifo_sink_payload_data;
		master_tx_fifo_source_payload_len <= master_tx_fifo_sink_payload_len;
		master_tx_fifo_source_payload_width <= master_tx_fifo_sink_payload_width;
		master_tx_fifo_source_payload_mask <= master_tx_fifo_sink_payload_mask;
	end
	if (((~master_rx_fifo_source_valid) | master_rx_fifo_source_ready)) begin
		master_rx_fifo_source_valid <= master_rx_fifo_sink_valid;
		master_rx_fifo_source_first <= master_rx_fifo_sink_first;
		master_rx_fifo_source_last <= master_rx_fifo_sink_last;
		master_rx_fifo_source_payload_data <= master_rx_fifo_sink_payload_data;
	end
	{hpssoc_tx_tick, hpssoc_tx_phase} <= 24'd9895604;
	if (hpssoc_tx_enable) begin
		{hpssoc_tx_tick, hpssoc_tx_phase} <= (hpssoc_tx_phase + 24'd9895604);
	end
	rs232phytx_state <= rs232phytx_next_state;
	if (hpssoc_tx_count_rs232phytx_next_value_ce0) begin
		hpssoc_tx_count <= hpssoc_tx_count_rs232phytx_next_value0;
	end
	if (hpssoc_serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= hpssoc_serial_tx_rs232phytx_next_value1;
	end
	if (hpssoc_tx_data_rs232phytx_next_value_ce2) begin
		hpssoc_tx_data <= hpssoc_tx_data_rs232phytx_next_value2;
	end
	hpssoc_rx_rx_d <= hpssoc_rx_rx;
	{hpssoc_rx_tick, hpssoc_rx_phase} <= 32'd2147483648;
	if (hpssoc_rx_enable) begin
		{hpssoc_rx_tick, hpssoc_rx_phase} <= (hpssoc_rx_phase + 24'd9895604);
	end
	rs232phyrx_state <= rs232phyrx_next_state;
	if (hpssoc_rx_count_rs232phyrx_next_value_ce0) begin
		hpssoc_rx_count <= hpssoc_rx_count_rs232phyrx_next_value0;
	end
	if (hpssoc_rx_data_rs232phyrx_next_value_ce1) begin
		hpssoc_rx_data <= hpssoc_rx_data_rs232phyrx_next_value1;
	end
	if (hpssoc_tx_clear) begin
		hpssoc_tx_pending <= 1'd0;
	end
	hpssoc_tx_trigger_d <= hpssoc_tx_trigger;
	if ((hpssoc_tx_trigger & (~hpssoc_tx_trigger_d))) begin
		hpssoc_tx_pending <= 1'd1;
	end
	if (hpssoc_rx_clear) begin
		hpssoc_rx_pending <= 1'd0;
	end
	hpssoc_rx_trigger_d <= hpssoc_rx_trigger;
	if ((hpssoc_rx_trigger & (~hpssoc_rx_trigger_d))) begin
		hpssoc_rx_pending <= 1'd1;
	end
	if (hpssoc_tx_fifo_syncfifo_re) begin
		hpssoc_tx_fifo_readable <= 1'd1;
	end else begin
		if (hpssoc_tx_fifo_re) begin
			hpssoc_tx_fifo_readable <= 1'd0;
		end
	end
	if (((hpssoc_tx_fifo_syncfifo_we & hpssoc_tx_fifo_syncfifo_writable) & (~hpssoc_tx_fifo_replace))) begin
		hpssoc_tx_fifo_produce <= (hpssoc_tx_fifo_produce + 1'd1);
	end
	if (hpssoc_tx_fifo_do_read) begin
		hpssoc_tx_fifo_consume <= (hpssoc_tx_fifo_consume + 1'd1);
	end
	if (((hpssoc_tx_fifo_syncfifo_we & hpssoc_tx_fifo_syncfifo_writable) & (~hpssoc_tx_fifo_replace))) begin
		if ((~hpssoc_tx_fifo_do_read)) begin
			hpssoc_tx_fifo_level0 <= (hpssoc_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (hpssoc_tx_fifo_do_read) begin
			hpssoc_tx_fifo_level0 <= (hpssoc_tx_fifo_level0 - 1'd1);
		end
	end
	if (hpssoc_rx_fifo_syncfifo_re) begin
		hpssoc_rx_fifo_readable <= 1'd1;
	end else begin
		if (hpssoc_rx_fifo_re) begin
			hpssoc_rx_fifo_readable <= 1'd0;
		end
	end
	if (((hpssoc_rx_fifo_syncfifo_we & hpssoc_rx_fifo_syncfifo_writable) & (~hpssoc_rx_fifo_replace))) begin
		hpssoc_rx_fifo_produce <= (hpssoc_rx_fifo_produce + 1'd1);
	end
	if (hpssoc_rx_fifo_do_read) begin
		hpssoc_rx_fifo_consume <= (hpssoc_rx_fifo_consume + 1'd1);
	end
	if (((hpssoc_rx_fifo_syncfifo_we & hpssoc_rx_fifo_syncfifo_writable) & (~hpssoc_rx_fifo_replace))) begin
		if ((~hpssoc_rx_fifo_do_read)) begin
			hpssoc_rx_fifo_level0 <= (hpssoc_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (hpssoc_rx_fifo_do_read) begin
			hpssoc_rx_fifo_level0 <= (hpssoc_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	uptime_cycles <= (uptime_cycles + 1'd1);
	if (uptime_latch_re) begin
		uptime_cycles_status <= uptime_cycles;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	state <= next_state;
	case (grant)
		1'd0: begin
			if ((~request[0])) begin
				if (request[1]) begin
					grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~request[1])) begin
				if (request[0]) begin
					grant <= 1'd0;
				end
			end
		end
	endcase
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[8:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_reset0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_scratch0_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= csrbank0_bus_errors_w;
			end
		endcase
	end
	if (csrbank0_reset0_re) begin
		reset_storage[1:0] <= csrbank0_reset0_r;
	end
	reset_re <= csrbank0_reset0_re;
	if (csrbank0_scratch0_re) begin
		scratch_storage[31:0] <= csrbank0_scratch0_r;
	end
	scratch_re <= csrbank0_scratch0_re;
	bus_errors_re <= csrbank0_bus_errors_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[8:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_mmap_dummy_bits0_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_master_cs0_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_master_phyconfig0_w;
			end
			2'd3: begin
				interface1_bank_bus_dat_r <= master_rxtx_w;
			end
			3'd4: begin
				interface1_bank_bus_dat_r <= csrbank1_master_status_w;
			end
		endcase
	end
	if (csrbank1_mmap_dummy_bits0_re) begin
		litespimmap_storage[7:0] <= csrbank1_mmap_dummy_bits0_r;
	end
	litespimmap_re <= csrbank1_mmap_dummy_bits0_re;
	if (csrbank1_master_cs0_re) begin
		master_cs_storage <= csrbank1_master_cs0_r;
	end
	master_cs_re <= csrbank1_master_cs0_re;
	if (csrbank1_master_phyconfig0_re) begin
		master_phyconfig_storage[23:0] <= csrbank1_master_phyconfig0_r;
	end
	master_phyconfig_re <= csrbank1_master_phyconfig0_re;
	master_status_re <= csrbank1_master_status_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[8:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_load0_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_reload0_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_en0_w;
			end
			2'd3: begin
				interface2_bank_bus_dat_r <= csrbank2_update_value0_w;
			end
			3'd4: begin
				interface2_bank_bus_dat_r <= csrbank2_value_w;
			end
			3'd5: begin
				interface2_bank_bus_dat_r <= csrbank2_ev_status_w;
			end
			3'd6: begin
				interface2_bank_bus_dat_r <= csrbank2_ev_pending_w;
			end
			3'd7: begin
				interface2_bank_bus_dat_r <= csrbank2_ev_enable0_w;
			end
			4'd8: begin
				interface2_bank_bus_dat_r <= csrbank2_uptime_latch0_w;
			end
			4'd9: begin
				interface2_bank_bus_dat_r <= csrbank2_uptime_cycles1_w;
			end
			4'd10: begin
				interface2_bank_bus_dat_r <= csrbank2_uptime_cycles0_w;
			end
		endcase
	end
	if (csrbank2_load0_re) begin
		timer_load_storage[31:0] <= csrbank2_load0_r;
	end
	timer_load_re <= csrbank2_load0_re;
	if (csrbank2_reload0_re) begin
		timer_reload_storage[31:0] <= csrbank2_reload0_r;
	end
	timer_reload_re <= csrbank2_reload0_re;
	if (csrbank2_en0_re) begin
		timer_en_storage <= csrbank2_en0_r;
	end
	timer_en_re <= csrbank2_en0_re;
	if (csrbank2_update_value0_re) begin
		timer_update_value_storage <= csrbank2_update_value0_r;
	end
	timer_update_value_re <= csrbank2_update_value0_re;
	timer_value_re <= csrbank2_value_re;
	timer_status_re <= csrbank2_ev_status_re;
	if (csrbank2_ev_pending_re) begin
		timer_pending_r <= csrbank2_ev_pending_r;
	end
	timer_pending_re <= csrbank2_ev_pending_re;
	if (csrbank2_ev_enable0_re) begin
		timer_enable_storage <= csrbank2_ev_enable0_r;
	end
	timer_enable_re <= csrbank2_ev_enable0_re;
	if (csrbank2_uptime_latch0_re) begin
		uptime_latch_storage <= csrbank2_uptime_latch0_r;
	end
	uptime_latch_re <= csrbank2_uptime_latch0_re;
	uptime_cycles_re <= csrbank2_uptime_cycles0_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[8:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= hpssoc_rxtx_w;
			end
			1'd1: begin
				interface3_bank_bus_dat_r <= csrbank3_txfull_w;
			end
			2'd2: begin
				interface3_bank_bus_dat_r <= csrbank3_rxempty_w;
			end
			2'd3: begin
				interface3_bank_bus_dat_r <= csrbank3_ev_status_w;
			end
			3'd4: begin
				interface3_bank_bus_dat_r <= csrbank3_ev_pending_w;
			end
			3'd5: begin
				interface3_bank_bus_dat_r <= csrbank3_ev_enable0_w;
			end
			3'd6: begin
				interface3_bank_bus_dat_r <= csrbank3_txempty_w;
			end
			3'd7: begin
				interface3_bank_bus_dat_r <= csrbank3_rxfull_w;
			end
		endcase
	end
	hpssoc_txfull_re <= csrbank3_txfull_re;
	hpssoc_rxempty_re <= csrbank3_rxempty_re;
	hpssoc_status_re <= csrbank3_ev_status_re;
	if (csrbank3_ev_pending_re) begin
		hpssoc_pending_r[1:0] <= csrbank3_ev_pending_r;
	end
	hpssoc_pending_re <= csrbank3_ev_pending_re;
	if (csrbank3_ev_enable0_re) begin
		hpssoc_enable_storage[1:0] <= csrbank3_ev_enable0_r;
	end
	hpssoc_enable_re <= csrbank3_ev_enable0_re;
	hpssoc_txempty_re <= csrbank3_txempty_re;
	hpssoc_rxfull_re <= csrbank3_rxfull_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		lram_bus_ack <= 1'd0;
		arena_bus_ack <= 1'd0;
		litespiddrphycore_en <= 1'd0;
		litespiddrphycore_count <= 4'd11;
		litespiddrphycore0 <= 4'd0;
		litespiddrphycore4 <= 4'd0;
		litespimmap_burst_cs <= 1'd0;
		litespimmap_count <= 9'd256;
		litespimmap_storage <= 8'd8;
		litespimmap_re <= 1'd0;
		master_cs_storage <= 1'd0;
		master_cs_re <= 1'd0;
		master_phyconfig_storage <= 24'd0;
		master_phyconfig_re <= 1'd0;
		master_status_re <= 1'd0;
		master_tx_fifo_source_valid <= 1'd0;
		master_tx_fifo_source_payload_data <= 32'd0;
		master_tx_fifo_source_payload_len <= 6'd0;
		master_tx_fifo_source_payload_width <= 4'd0;
		master_tx_fifo_source_payload_mask <= 8'd0;
		master_rx_fifo_source_valid <= 1'd0;
		master_rx_fifo_source_payload_data <= 32'd0;
		serial_tx <= 1'd1;
		hpssoc_tx_tick <= 1'd0;
		hpssoc_rx_tick <= 1'd0;
		hpssoc_rx_rx_d <= 1'd0;
		hpssoc_txfull_re <= 1'd0;
		hpssoc_rxempty_re <= 1'd0;
		hpssoc_tx_pending <= 1'd0;
		hpssoc_tx_trigger_d <= 1'd0;
		hpssoc_rx_pending <= 1'd0;
		hpssoc_rx_trigger_d <= 1'd0;
		hpssoc_status_re <= 1'd0;
		hpssoc_pending_re <= 1'd0;
		hpssoc_pending_r <= 2'd0;
		hpssoc_enable_storage <= 2'd0;
		hpssoc_enable_re <= 1'd0;
		hpssoc_txempty_re <= 1'd0;
		hpssoc_rxfull_re <= 1'd0;
		hpssoc_tx_fifo_readable <= 1'd0;
		hpssoc_tx_fifo_level0 <= 5'd0;
		hpssoc_tx_fifo_produce <= 4'd0;
		hpssoc_tx_fifo_consume <= 4'd0;
		hpssoc_rx_fifo_readable <= 1'd0;
		hpssoc_rx_fifo_level0 <= 5'd0;
		hpssoc_rx_fifo_produce <= 4'd0;
		hpssoc_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		uptime_latch_storage <= 1'd0;
		uptime_latch_re <= 1'd0;
		uptime_cycles_status <= 64'd0;
		uptime_cycles_re <= 1'd0;
		litespiphy_state <= 2'd0;
		litespi_grant <= 1'd0;
		litespi_state <= 4'd0;
		rs232phytx_state <= 1'd0;
		rs232phyrx_state <= 1'd0;
		grant <= 1'd0;
		slave_sel_r <= 4'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	regs0 <= serial_rx;
	regs1 <= regs0;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

SP512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) SP512K (
	.AD(lram_bus_adr[13:0]),
	.BYTEEN_N((~lram_bus_sel[3:0])),
	.CE(1'd1),
	.CEOUT(1'd0),
	.CLK(sys_clk),
	.CS(lram_cs),
	.DI(lram_datain),
	.RSTOUT(1'd0),
	.WE(lram_wren),
	.DO(lram_dataout)
);

DPSC512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) DPSC512K (
	.ADA(arena_bus_adr[15:2]),
	.ADB(arena_b_addr0),
	.BENA_N((~arena_bus_sel[3:0])),
	.CEA(1'd1),
	.CEB(1'd1),
	.CEOUTA(1'd0),
	.CEOUTB(1'd0),
	.CLK(sys_clk),
	.CSA(arena_cs0),
	.CSB(1'd1),
	.DIA(arena_datain0),
	.RSTA(1'd0),
	.RSTB(1'd0),
	.WEA(arena_wren0),
	.WEB(1'd0),
	.DOA(arena_dataout0),
	.DOB(arena_b_dout0)
);

DPSC512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) DPSC512K_1 (
	.ADA(arena_bus_adr[15:2]),
	.ADB(arena_b_addr1),
	.BENA_N((~arena_bus_sel[3:0])),
	.CEA(1'd1),
	.CEB(1'd1),
	.CEOUTA(1'd0),
	.CEOUTB(1'd0),
	.CLK(sys_clk),
	.CSA(arena_cs1),
	.CSB(1'd1),
	.DIA(arena_datain1),
	.RSTA(1'd0),
	.RSTB(1'd0),
	.WEA(arena_wren1),
	.WEB(1'd0),
	.DOA(arena_dataout1),
	.DOB(arena_b_dout1)
);

DPSC512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) DPSC512K_2 (
	.ADA(arena_bus_adr[15:2]),
	.ADB(arena_b_addr2),
	.BENA_N((~arena_bus_sel[3:0])),
	.CEA(1'd1),
	.CEB(1'd1),
	.CEOUTA(1'd0),
	.CEOUTB(1'd0),
	.CLK(sys_clk),
	.CSA(arena_cs2),
	.CSB(1'd1),
	.DIA(arena_datain2),
	.RSTA(1'd0),
	.RSTB(1'd0),
	.WEA(arena_wren2),
	.WEB(1'd0),
	.DOA(arena_dataout2),
	.DOB(arena_b_dout2)
);

DPSC512K #(
	.ECC_BYTE_SEL("BYTE_EN")
) DPSC512K_3 (
	.ADA(arena_bus_adr[15:2]),
	.ADB(arena_b_addr3),
	.BENA_N((~arena_bus_sel[3:0])),
	.CEA(1'd1),
	.CEB(1'd1),
	.CEOUTA(1'd0),
	.CEOUTB(1'd0),
	.CLK(sys_clk),
	.CSA(arena_cs3),
	.CSB(1'd1),
	.DIA(arena_datain3),
	.RSTA(1'd0),
	.RSTB(1'd0),
	.WEA(arena_wren3),
	.WEB(1'd0),
	.DOA(arena_dataout3),
	.DOB(arena_b_dout3)
);

//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk) begin
	if (hpssoc_tx_fifo_wrport_we)
		storage[hpssoc_tx_fifo_wrport_adr] <= hpssoc_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[hpssoc_tx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (hpssoc_tx_fifo_rdport_re)
		storage_dat1 <= storage[hpssoc_tx_fifo_rdport_adr];
end
assign hpssoc_tx_fifo_wrport_dat_r = storage_dat0;
assign hpssoc_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk) begin
	if (hpssoc_rx_fifo_wrport_we)
		storage_1[hpssoc_rx_fifo_wrport_adr] <= hpssoc_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[hpssoc_rx_fifo_wrport_adr];
end
always @(posedge sys_clk) begin
	if (hpssoc_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[hpssoc_rx_fifo_rdport_adr];
end
assign hpssoc_rx_fifo_wrport_dat_r = storage_1_dat0;
assign hpssoc_rx_fifo_rdport_dat_r = storage_1_dat1;


OSCA #(
	.HF_CLK_DIV("8"),
	.HF_OSC_EN("ENABLED")
) OSCA (
	.HFOUTEN(1'd1),
	.HFCLKOUT(clkout)
);

VexRiscv VexRiscv(
	.CfuPlugin_bus_cmd_ready(vexriscv_cfu_bus_cmd_ready),
	.CfuPlugin_bus_rsp_payload_outputs_0(vexriscv_cfu_bus_rsp_payload_outputs_0),
	.CfuPlugin_bus_rsp_valid(vexriscv_cfu_bus_rsp_valid),
	.clk(sys_clk),
	.dBusWishbone_ACK(dbus_ack),
	.dBusWishbone_DAT_MISO(dbus_dat_r),
	.dBusWishbone_ERR(dbus_err),
	.externalInterruptArray(interrupt),
	.externalResetVector(vexriscv),
	.iBusWishbone_ACK(ibus_ack),
	.iBusWishbone_DAT_MISO(ibus_dat_r),
	.iBusWishbone_ERR(ibus_err),
	.reset((sys_rst | reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.CfuPlugin_bus_cmd_payload_function_id(vexriscv_cfu_bus_cmd_payload_function_id),
	.CfuPlugin_bus_cmd_payload_inputs_0(vexriscv_cfu_bus_cmd_payload_inputs_0),
	.CfuPlugin_bus_cmd_payload_inputs_1(vexriscv_cfu_bus_cmd_payload_inputs_1),
	.CfuPlugin_bus_cmd_valid(vexriscv_cfu_bus_cmd_valid),
	.CfuPlugin_bus_rsp_ready(vexriscv_cfu_bus_rsp_ready),
	.dBusWishbone_ADR(dbus_adr),
	.dBusWishbone_BTE(dbus_bte),
	.dBusWishbone_CTI(dbus_cti),
	.dBusWishbone_CYC(dbus_cyc),
	.dBusWishbone_DAT_MOSI(dbus_dat_w),
	.dBusWishbone_SEL(dbus_sel),
	.dBusWishbone_STB(dbus_stb),
	.dBusWishbone_WE(dbus_we),
	.iBusWishbone_ADR(ibus_adr),
	.iBusWishbone_BTE(ibus_bte),
	.iBusWishbone_CTI(ibus_cti),
	.iBusWishbone_CYC(ibus_cyc),
	.iBusWishbone_DAT_MOSI(ibus_dat_w),
	.iBusWishbone_SEL(ibus_sel),
	.iBusWishbone_STB(ibus_stb),
	.iBusWishbone_WE(ibus_we)
);

Cfu Cfu(
	.clk(sys_clk),
	.cmd_payload_function_id(vexriscv_cfu_bus_cmd_payload_function_id),
	.cmd_payload_inputs_0(vexriscv_cfu_bus_cmd_payload_inputs_0),
	.cmd_payload_inputs_1(vexriscv_cfu_bus_cmd_payload_inputs_1),
	.cmd_valid(vexriscv_cfu_bus_cmd_valid),
	.port0_din(cfu_lram_bus_lram0_din),
	.port1_din(cfu_lram_bus_lram1_din),
	.port2_din(cfu_lram_bus_lram2_din),
	.port3_din(cfu_lram_bus_lram3_din),
	.reset(sys_rst),
	.rsp_ready(vexriscv_cfu_bus_rsp_ready),
	.cmd_ready(vexriscv_cfu_bus_cmd_ready),
	.port0_addr(cfu_lram_bus_lram0_addr),
	.port1_addr(cfu_lram_bus_lram1_addr),
	.port2_addr(cfu_lram_bus_lram2_addr),
	.port3_addr(cfu_lram_bus_lram3_addr),
	.rsp_payload_outputs_0(vexriscv_cfu_bus_rsp_payload_outputs_0),
	.rsp_valid(vexriscv_cfu_bus_rsp_valid)
);

FD1P3BX FD1P3BX(
	.CK(sys_clk),
	.D(1'd0),
	.PD((por_counter != 1'd0)),
	.SP(1'd1),
	.Q(rst1)
);

FD1P3BX FD1P3BX_1(
	.CK(sys_clk),
	.D(rst1),
	.PD((por_counter != 1'd0)),
	.SP(1'd1),
	.Q(sys_rst)
);

ODDRX1 ODDRX1(
	.D0(litespiddrphycore_en),
	.D1(1'd0),
	.SCLK(sys_clk),
	.Q(spiflash4x_clk)
);

assign spiflash4x_dq[0] = latticenxddrtristateimpl0_oe ? latticenxddrtristateimpl0__o : 1'bz;
assign latticenxddrtristateimpl0__i = spiflash4x_dq[0];

assign spiflash4x_dq[1] = latticenxddrtristateimpl1_oe ? latticenxddrtristateimpl1__o : 1'bz;
assign latticenxddrtristateimpl1__i = spiflash4x_dq[1];

assign spiflash4x_dq[2] = latticenxddrtristateimpl2_oe ? latticenxddrtristateimpl2__o : 1'bz;
assign latticenxddrtristateimpl2__i = spiflash4x_dq[2];

assign spiflash4x_dq[3] = latticenxddrtristateimpl3_oe ? latticenxddrtristateimpl3__o : 1'bz;
assign latticenxddrtristateimpl3__i = spiflash4x_dq[3];

ODDRX1 ODDRX1_1(
	.D0(litespiddrphycore0[0]),
	.D1(litespiddrphycore1[0]),
	.SCLK(sys_clk),
	.Q(latticenxddrtristateimpl0__o)
);

FD1P3BX FD1P3BX_2(
	.CK(sys_clk),
	.D((litespiddrphycore4[0] | litespiddrphycore5[0])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(latticenxddrtristateimpl0_oe)
);

IDDRX1 IDDRX1(
	.D(latticenxddrtristateimpl0__i),
	.SCLK(sys_clk),
	.Q0(litespiddrphycore2[0]),
	.Q1(litespiddrphycore3[0])
);

ODDRX1 ODDRX1_2(
	.D0(litespiddrphycore0[1]),
	.D1(litespiddrphycore1[1]),
	.SCLK(sys_clk),
	.Q(latticenxddrtristateimpl1__o)
);

FD1P3BX FD1P3BX_3(
	.CK(sys_clk),
	.D((litespiddrphycore4[1] | litespiddrphycore5[1])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(latticenxddrtristateimpl1_oe)
);

IDDRX1 IDDRX1_1(
	.D(latticenxddrtristateimpl1__i),
	.SCLK(sys_clk),
	.Q0(litespiddrphycore2[1]),
	.Q1(litespiddrphycore3[1])
);

ODDRX1 ODDRX1_3(
	.D0(litespiddrphycore0[2]),
	.D1(litespiddrphycore1[2]),
	.SCLK(sys_clk),
	.Q(latticenxddrtristateimpl2__o)
);

FD1P3BX FD1P3BX_4(
	.CK(sys_clk),
	.D((litespiddrphycore4[2] | litespiddrphycore5[2])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(latticenxddrtristateimpl2_oe)
);

IDDRX1 IDDRX1_2(
	.D(latticenxddrtristateimpl2__i),
	.SCLK(sys_clk),
	.Q0(litespiddrphycore2[2]),
	.Q1(litespiddrphycore3[2])
);

ODDRX1 ODDRX1_4(
	.D0(litespiddrphycore0[3]),
	.D1(litespiddrphycore1[3]),
	.SCLK(sys_clk),
	.Q(latticenxddrtristateimpl3__o)
);

FD1P3BX FD1P3BX_5(
	.CK(sys_clk),
	.D((litespiddrphycore4[3] | litespiddrphycore5[3])),
	.PD(1'd0),
	.SP(1'd1),
	.Q(latticenxddrtristateimpl3_oe)
);

IDDRX1 IDDRX1_3(
	.D(latticenxddrtristateimpl3__i),
	.SCLK(sys_clk),
	.Q0(litespiddrphycore2[3]),
	.Q1(litespiddrphycore3[3])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-02-02 07:36:49.
//------------------------------------------------------------------------------
